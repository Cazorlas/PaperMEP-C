<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nice3point.Revit.Extensions</name>
    </assembly>
    <members>
        <member name="T:Nice3point.Revit.Extensions.BoundingBoxXyzExtensions">
            <summary>
                Revit BoundingBoxXyz Extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.BoundingBoxXyzExtensions.ComputeCentroid(Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
                Computes the geometric center point of the bounding box.
            </summary>
            <param name="boundingBox">The bounding box from which the centroid is calculated.</param>
            <returns>A point representing the centroid of the bounding box.</returns>
            <remarks>BoundingBoxXYZ <see cref="T:Autodesk.Revit.DB.Transform"/> is not applied</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.BoundingBoxXyzExtensions.ComputeVertices(Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
                Retrieves the coordinates of the eight vertices that define the bounding box.
            </summary>
            <param name="boundingBox">The bounding box from which the vertices are computed.</param>
            <returns>An array of points representing the vertices of the bounding box.</returns>
            <remarks>BoundingBoxXYZ <see cref="T:Autodesk.Revit.DB.Transform"/> is not applied</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.BoundingBoxXyzExtensions.ComputeVolume(Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
                Calculates the volume enclosed by the bounding box.
            </summary>
            <param name="boundingBox">The bounding box for which the volume is calculated.</param>
            <returns>The volume of the bounding box.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.BoundingBoxXyzExtensions.ComputeSurfaceArea(Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
                Calculates the total surface area of the bounding box.
            </summary>
            <param name="boundingBox">The bounding box for which the surface area is calculated.</param>
            <returns>The total surface area of the bounding box.</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.ColorExtensions">
            <summary>
                Revit and System Color Extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToHex(Autodesk.Revit.DB.Color)">
            <summary>
                Return a hexadecimal <see cref="T:System.String"/> representation of a RGB color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the hexadecimal presentation</param>
            <returns>A hexadecimal <see cref="T:System.String"/> representation of a RGB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToHexInteger(Autodesk.Revit.DB.Color)">
            <summary>
            Return a hexadecimal integer <see cref="T:System.String"/> representation of a RGB color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the hexadecimal integer presentation</param>
            <returns>A hexadecimal integer <see cref="T:System.String"/> representation of a RGB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToRgb(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a RGB color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the RGB color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a RGB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToHsl(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HSL color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the HSL color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HSL color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToHsv(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HSV color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the HSV color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HSV color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToCmyk(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a CMYK color
            </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/> for the CMYK color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a CMYK color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToHsb(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HSB color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the HSB color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HSB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToHsi(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HSI color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the HSI color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HSI color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToHwb(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HWB color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the HWB color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HWB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToNCol(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a natural color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the natural color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a natural color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToCielab(Autodesk.Revit.DB.Color)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of a CIE LAB color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the CIE LAB color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a CIE LAB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToCieXyz(Autodesk.Revit.DB.Color)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of a CIE XYZ color
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> for the CIE XYZ color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a CIE XYZ color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToFloat(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation float color styling(0.1f, 0.1f, 0.1f)
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> to convert</param>
            <returns>a string value (0.1f, 0.1f, 0.1f)</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ColorExtensions.ToDecimal(Autodesk.Revit.DB.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation decimal color value
            </summary>
            <param name="color">The <see cref="T:Autodesk.Revit.DB.Color"/> to convert</param>
            <returns>a string value number</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.ElementExtensions">
            <summary>
                Revit Element Extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementExtensions.GetParameter(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.ForgeTypeId,System.Boolean)">
            <summary>
                Retrieves a parameter from the instance or symbol given identifier
            </summary>
            <param name="element">The element</param>
            <param name="parameter">Identifier of the built-in parameter</param>
            <param name="snoopType">True if you want to snoop the symbol parameter</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                ForgeTypeId does not identify a built-in parameter. See Parameter.IsBuiltInParameter(ForgeTypeId) and Parameter.GetParameterTypeId(BuiltInParameter).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementExtensions.GetParameter(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.BuiltInParameter)">
            <summary>
                Retrieves a parameter from the instance or symbol given identifier
            </summary>
            <param name="element">The element</param>
            <param name="parameter">The built-in parameter ID</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementExtensions.GetParameter(Autodesk.Revit.DB.Element,System.String)">
            <summary>
                Retrieves a parameter from the instance or symbol given identifier
            </summary>
            <param name="element">The element</param>
            <param name="parameter">The name of the parameter to be retrieved</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementExtensions.FindParameter(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Find a parameter in the instance or symbol by identifier
            </summary>
            <param name="element">The element</param>
            <param name="parameter">Identifier of the built-in parameter</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                ForgeTypeId does not identify a built-in parameter. See Parameter.IsBuiltInParameter(ForgeTypeId) and Parameter.GetParameterTypeId(BuiltInParameter).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementExtensions.FindParameter(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.BuiltInParameter)">
            <summary>
                Find a parameter in the instance or symbol by identifier
            </summary>
            <param name="element">The element</param>
            <param name="parameter">The built-in parameter ID</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementExtensions.FindParameter(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Definition)">
            <summary>
                Find a parameter in the instance or symbol by identifier
            </summary>
            <param name="element">The element</param>
            <param name="definition">The internal or external definition of the parameter</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementExtensions.FindParameter(Autodesk.Revit.DB.Element,System.Guid)">
            <summary>
                Find a parameter in the instance or symbol by identifier
            </summary>
            <param name="element">The element</param>
            <param name="guid">The unique id associated with the shared parameter</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementExtensions.FindParameter(Autodesk.Revit.DB.Element,System.String)">
            <summary>
                Find a parameter in the instance or symbol by identifier
            </summary>
            <param name="element">The element</param>
            <param name="parameter">The name of the parameter to be found</param>
        </member>
        <member name="T:Nice3point.Revit.Extensions.ElementIdExtensions">
            <summary>
                Revit Element Extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementIdExtensions.ToElement(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Document)">
            <summary>
                Retrieves the Element associated with the specified ElementId.
            </summary>
            <param name="document">The document containing the element.</param>
            <param name="id">The ElementId of the element to retrieve.</param>
            <returns>The element associated with the specified ElementId, or <see langword="null"/> if the ElementId is invalid.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementIdExtensions.ToElement``1(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Document)">
            <summary>
                Retrieves the Element associated with the specified ElementId as the specified type T.
            </summary>
            <typeparam name="T">The expected type of the element.</typeparam>
            <param name="document">The document containing the element.</param>
            <param name="id">The ElementId of the element to retrieve.</param>
            <returns>The element of type T associated with the specified ElementId, or <see langword="null"/> if the ElementId is invalid.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementIdExtensions.ToElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            <summary>
                Retrieves a collection of Elements associated with the specified ElementIds.
            </summary>
            <param name="document">The document containing the elements.</param>
            <param name="elementIds">The collection of ElementIds to retrieve the elements for.</param>
            <returns>A list of elements associated with the specified ElementIds.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementIdExtensions.ToElements``1(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            <summary>
                Retrieves a collection of Elements associated with the specified ElementIds as the specified type T.
            </summary>
            <typeparam name="T">The expected type of the elements.</typeparam>
            <param name="document">The document containing the elements.</param>
            <param name="elementIds">The collection of ElementIds to retrieve the elements for.</param>
            <returns>A list of elements of type T associated with the specified ElementIds.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementIdExtensions.ToOrderedElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            <summary>
                Retrieves the Elements associated with the specified ElementIds in their original order.
            </summary>
            <param name="document">The document containing the elements.</param>
            <param name="elementIds">The collection of ElementIds to retrieve the elements for.</param>
            <returns>A list of elements in the same order as the input ElementIds.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementIdExtensions.ToOrderedElements``1(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            <summary>
                Retrieves the Elements associated with the specified ElementIds and casts them to the specified type T in their original order.
            </summary>
            <typeparam name="T">The target type derived from Element.</typeparam>
            <param name="document">The document containing the elements.</param>
            <param name="elementIds">The collection of ElementIds to retrieve the elements for.</param>
            <returns>A list of elements of type T in the same order as the input ElementIds.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementIdExtensions.AreEquals(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Checks if ElementID is a category identifier
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementIdExtensions.AreEquals(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInParameter)">
            <summary>
                Checks if ElementID is a parameter identifier
            </summary>
        </member>
        <member name="T:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions">
            <summary>
                Revit FilteredElementCollector extensions
            </summary>
            <remarks>
                <p>
                    Developers can assign a variety of conditions to filter the elements that are returned.
                    This class requires that at least one condition be set before making the attempt to access the elements.
                </p>
                <p>
                    Revit will attempt to organize the filters in order to minimize expansion of elements regardless of
                    the order in which conditions and filters are applied.
                </p>
                <p>
                    There are three groups of methods that you can use on a given collector once you have applied filter(s)
                    to it.  One group provides collections of all passing elements, a second finds the first match of the given
                    filter(s), and a third provides an iterator that is evaluated lazily (each element is tested by the filter
                    only when the iterator reaches it). You should only use
                    one of the methods from these group at a time; the collector will reset if you call another method to
                    extract elements.  Thus, if you have previously obtained an iterator, it will be stopped and traverse no more
                    elements if you call another method to extract elements.
                </p>
                <p>
                    In .NET, this class supports the IEnumerable interface for Elements.  You can use this class with
                    LINQ queries and operations to process lists of elements.  Note that because the ElementFilters
                    and the shortcut methods offered by this class process elements in native code before their
                    managed wrappers are generated, better performance will be obtained by using as many native filters
                    as possible on the collector before attempting to process the results using LINQ queries.
                </p>
                <p>
                    One special consideration when using this class in .NET: the debugger will attempt
                    to traverse the members of the collector because of its implementation of IEnumerable.  You may see strange
                    results if you also attempt to extract the first element or all elements from the collector while the debugger
                    is also looking at the contents of the collector.
                </p>
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetElements(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <returns>A new FilteredElementCollector that will search and filter the set of elements in a document</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                The collector does not have a filter applied. Extraction or iteration of elements is not permitted without a filter
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetElements(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
                Searches for elements in a document
            </summary>
            <returns>A new FilteredElementCollector that will search and filter the visible elements in a view</returns>
            <remarks>
                <p>
                    Elements that will be passed by the collector have graphics that may be visible in
                    the input view. Some elements may still be hidden because they are obscured by other elements.
                </p>
                <p>
                    For elements which are outside of a crop region, they may still be passed by the collector because
                    Revit relies on later processing to eliminate the elements hidden by the crop.
                    This effect may more easily occur for non-rectangular crop regions, but may also happen even for rectangular crops.
                    You can compare the boundary of the region with the element's boundary if more precise results are required.
                </p>
                <p>
                    Accessing these visible elements may require Revit to rebuild the geometry of the view.
                    The first time your code constructs a collector for a given view, or the first time
                    your code constructs a collector for a view whose display settings have just been changed,
                    you may experience a significant performance degradation.
                </p>
            </remarks>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                viewId is not valid for element iteration, because it has no way of representing drawn elements. Many view templates will fail this check.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document that owns the elements matching the element ids</param>
            <returns>A new FilteredElementCollector that will search and filter a specified set of elements in a document</returns>
            <param name="elementIds">The input set of element ids</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstances``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateInstanceIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document visible in view by class of type T
            </summary>
            <param name="document">The document that owns the view</param>
            <param name="viewId">The view id</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypes(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypes(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypes(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypes(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypes(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypes(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes``1(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypes``1(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of elements</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypeIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypeIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypeIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypeIds(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypeIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.GetTypeIds(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="category">The category</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds``1(Autodesk.Revit.DB.Document)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="filter">Filter that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FilteredElementCollectorExtensions.EnumerateTypeIds``1(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.ElementFilter})">
            <summary>
                Searches for elements in a document by class of type T
            </summary>
            <param name="document">The document</param>
            <param name="filters">Filters that accepts or rejects elements based upon criteria</param>
            <returns>The complete set of element ids</returns>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element"/></typeparam>
        </member>
        <member name="T:Nice3point.Revit.Extensions.GeometryExtensions">
            <summary>
                Revit Geometry Extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.Distance(Autodesk.Revit.DB.Line,Autodesk.Revit.DB.Line)">
            <summary>
                Returns the distance between Lines. The Lines are considered to be endless
            </summary>
            <returns>Distance between lines. Returns 0 if the lines intersect</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.Contains(Autodesk.Revit.DB.BoundingBoxXYZ,Autodesk.Revit.DB.XYZ)">
            <summary>
                Determines whether the specified point is contained within this BoundingBox
            </summary>
            <param name="source">The source <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance</param>
            <param name="point">The <see cref="T:Autodesk.Revit.DB.XYZ"/> point to check for containment within the source <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/></param>
            <returns><c>true</c> if the specified point is within the bounds of the <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/></returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.Contains(Autodesk.Revit.DB.BoundingBoxXYZ,Autodesk.Revit.DB.XYZ,System.Boolean)">
            <summary>
                Determines whether the specified point is contained within this BoundingBox
            </summary>
            <param name="source">The source <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance</param>
            <param name="point">The <see cref="T:Autodesk.Revit.DB.XYZ"/> point to check for containment within the source <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/></param>
            <param name="strict"><c>true</c> if the point needs to be fully on the inside of the source. A point coinciding with the box border will be considered 'outside'.</param>
            <returns><c>true</c> if the specified point is within the bounds of the <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/></returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.Contains(Autodesk.Revit.DB.BoundingBoxXYZ,Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
            Determines whether this <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> contains another <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/>
            </summary>
            <param name="source">The source <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance</param>
            <param name="other">The <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance to compare with the source</param>
            <returns><c>true</c> if the source <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> contains the other <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.Contains(Autodesk.Revit.DB.BoundingBoxXYZ,Autodesk.Revit.DB.BoundingBoxXYZ,System.Boolean)">
            <summary>
            Determines whether this <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> contains another <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/>
            </summary>
            <param name="source">The source <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance</param>
            <param name="other">The <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance to compare with the source</param>
            <param name="strict"><c>true</c> if the box needs to be fully on the inside of the source. Coincident boxes will be considered 'outside'.</param>
            <returns><c>true</c> if the source <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> contains the other <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.Overlaps(Autodesk.Revit.DB.BoundingBoxXYZ,Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
                Determines whether this BoundingBox overlaps with another BoundingBox
            </summary>
            <param name="source">The source <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance</param>
            <param name="other">The <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instance to compare with the source</param>
            <returns><c>true</c> if the two <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ"/> instances have at least one common point</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.SetCoordinateX(Autodesk.Revit.DB.Line,System.Double)">
            <summary>
                Creates an instance of a curve with a new coordinate
            </summary>
            <param name="line">Initial curve</param>
            <param name="x">New coordinate</param>
            <returns>The new bound line</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentsInconsistentException">
               Curve length is too small for Revit's tolerance (as identified by Application.ShortCurveTolerance)
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.SetCoordinateY(Autodesk.Revit.DB.Line,System.Double)">
            <summary>
                Creates an instance of a curve with a new coordinate
            </summary>
            <param name="line">Initial curve</param>
            <param name="y">New coordinate</param>
            <returns>The new bound line</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentsInconsistentException">
               Curve length is too small for Revit's tolerance (as identified by Application.ShortCurveTolerance)
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.SetCoordinateZ(Autodesk.Revit.DB.Line,System.Double)">
            <summary>
                Creates an instance of a curve with a new coordinate
            </summary>
            <param name="line">Initial curve</param>
            <param name="z">New coordinate</param>
            <returns>The new bound line</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentsInconsistentException">
               Curve length is too small for Revit's tolerance (as identified by Application.ShortCurveTolerance)
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.SetCoordinateX(Autodesk.Revit.DB.Arc,System.Double)">
            <summary>
                Creates an instance of a curve with a new coordinate
            </summary>
            <param name="arc">Initial curve</param>
            <param name="x">New coordinate</param>
            <returns>The new bound line</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentsInconsistentException">
               Curve length is too small for Revit's tolerance (as identified by Application.ShortCurveTolerance)
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.SetCoordinateY(Autodesk.Revit.DB.Arc,System.Double)">
            <summary>
                Creates an instance of a curve with a new coordinate
            </summary>
            <param name="arc">Initial curve</param>
            <param name="y">New coordinate</param>
            <returns>The new bound line</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentsInconsistentException">
               Curve length is too small for Revit's tolerance (as identified by Application.ShortCurveTolerance)
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.SetCoordinateZ(Autodesk.Revit.DB.Arc,System.Double)">
            <summary>
                Creates an instance of a curve with a new coordinate
            </summary>
            <param name="arc">Initial curve</param>
            <param name="z">New coordinate</param>
            <returns>The new bound line</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentsInconsistentException">
               Curve length is too small for Revit's tolerance (as identified by Application.ShortCurveTolerance)
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.SetX(Autodesk.Revit.DB.XYZ,System.Double)">
            <summary>
                Creates an instance of a point with a new coordinate
            </summary>
            <param name="point">Initial point</param>
            <param name="x">New coordinate</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.SetY(Autodesk.Revit.DB.XYZ,System.Double)">
            <summary>
                Creates an instance of a point with a new coordinate
            </summary>
            <param name="point">Initial point</param>
            <param name="y">New coordinate</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GeometryExtensions.SetZ(Autodesk.Revit.DB.XYZ,System.Double)">
            <summary>
                Creates an instance of a point with a new coordinate
            </summary>
            <param name="point">Initial point</param>
            <param name="z">New coordinate</param>
        </member>
        <member name="T:Nice3point.Revit.Extensions.ImperialExtensions">
            <summary>
                Imperial Units Extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ImperialExtensions.FromFraction(System.String)">
            <summary>
                Converts a string representation of a measurement in the Imperial system (feet and inches) to a double value.
            </summary>
            <param name="source">The Imperial system number as a string (e.g., 1'-3/32").</param>
            <returns>The equivalent value in feet as a double.</returns>
            <exception cref="T:System.FormatException">Thrown when the input string has an invalid format.</exception>
            <remarks>
                This method handles input in the format of feet, inches, and fractional inches. It supports several variations:
                <list type="bullet">
                    <item>Whole feet (e.g., 1')</item>
                    <item>Fractional inches (e.g., 1/8")</item>
                    <item>Feet and fractional inches (e.g., 1'-3/32")</item>
                    <item>Feet and decimal inches (e.g., 1'1.75")</item>
                </list>
                The method will convert these values into a total feet measurement, returning the result as a double.
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ImperialExtensions.TryFromFraction(System.String,System.Double@)">
            <summary>
                Attempts to convert the string representation of a measurement in the Imperial system (feet and inches)
                to a double value, returning a success flag instead of throwing an exception on failure.
            </summary>
            <param name="source">The Imperial system number as a string (e.g., 1'-3/32").</param>
            <param name="value">When this method returns, contains the converted value in feet if the conversion was successful; otherwise, 0.</param>
            <returns>
                <c>true</c> if the string was successfully converted to a double; otherwise, <c>false</c>.
            </returns>
            <remarks>
                The method does not throw exceptions on invalid input, but instead returns <c>false</c>.
                It supports several variations of the Imperial system format:
                <list type="bullet">
                    <item>Whole feet (e.g., 1')</item>
                    <item>Fractional inches (e.g., 1/8")</item>
                    <item>Feet and fractional inches (e.g., 1'-3/32")</item>
                    <item>Feet and decimal inches (e.g., 1'1.75")</item>
                </list>
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ImperialExtensions.ToFraction(System.Double,System.Int32)">
            <summary>
                Converts a double value representing a measurement in feet to its string representation in the Imperial system,
                expressed as feet, inches, and fractional inches with a specified denominator.
            </summary>
            <param name="source">The measurement in feet as a double.</param>
            <param name="denominator">
                The denominator used for fractional inches (8 for 1/8", 16 for 1/16"). 
            </param>
            <returns>
                A string representation of the measurement in feet, inches, and fractional inches.
                For example:
                <list type="bullet">
                    <item>0.0123 input with a denominator 8 returns 1/8"</item>
                    <item>12.006 input with a denominator 16 returns 12'-1/16"</item>
                    <item>25.222 input with a denominator 32 returns 25'-2 21/32"</item>
                </list>
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ImperialExtensions.ToFraction(System.Double)">
            <summary>
                Converts a double value representing a measurement in feet to its string representation in the Imperial system,
                expressed as feet, inches, and fractional inches. The default denominator for fractional inches is 8.
            </summary>
            <param name="source">The measurement in feet as a double.</param>
            <returns>
                A string representation of the measurement in feet, inches, and fractional inches, using 1/8" increments.
                For example:
                <list type="bullet">
                    <item>0.0123 input returns 1/8"</item>
                    <item>12.011 input returns 12'-1/8"</item>
                    <item>25.222 input returns 25'-2 1/8"</item>
                </list>
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ImperialExtensions.FromFraction(System.String,System.Double@)">
            <summary>
                Attempts to convert the string representation of a measurement in the Imperial system.
            </summary>
        </member>
        <member name="T:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils">
            <summary>
                Helper class to easier work with color formats
            </summary>
            <remarks>
                Implementation: https://github.com/microsoft/PowerToys/blob/main/src/common/ManagedCommon/ColorFormatHelper.cs
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.GetDrawingColor(System.Windows.Media.Color)">
            <summary>
                Return a drawing color of a given <see cref="T:System.Windows.Media.Color"/>
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.GetDrawingColor(Autodesk.Revit.DB.Color)">
            <summary>
                Return a drawing color of a given <see cref="T:Autodesk.Revit.DB.Color"/>
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.ConvertToCmykColor(System.Drawing.Color)">
            <summary>
            Convert a given <see cref="T:System.Drawing.Color"/> to a CMYK color (cyan, magenta, yellow, black key)
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The cyan[0..1], magenta[0..1], yellow[0..1] and black key[0..1] of the converted color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.ConvertToHsbColor(System.Drawing.Color)">
            <summary>
            Convert a given <see cref="T:System.Drawing.Color"/> to a HSB color (hue, saturation, brightness)
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The hue [0°..360°], saturation [0..1] and brightness [0..1] of the converted color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.ConvertToHsvColor(System.Drawing.Color)">
            <summary>
            Convert a given <see cref="T:System.Drawing.Color"/> to a HSV color (hue, saturation, value)
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The hue [0°..360°], saturation [0..1] and value [0..1] of the converted color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.ConvertToHsiColor(System.Drawing.Color)">
            <summary>
            Convert a given <see cref="T:System.Drawing.Color"/> to a HSI color (hue, saturation, intensity)
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The hue [0°..360°], saturation [0..1] and intensity [0..1] of the converted color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.ConvertToHslColor(System.Drawing.Color)">
            <summary>
            Convert a given <see cref="T:System.Drawing.Color"/> to a HSL color (hue, saturation, lightness)
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The hue [0°..360°], saturation [0..1] and lightness [0..1] values of the converted color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.ConvertToHwbColor(System.Drawing.Color)">
            <summary>
            Convert a given <see cref="T:System.Drawing.Color"/> to a HWB color (hue, whiteness, blackness)
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The hue [0°..360°], whiteness [0..1] and blackness [0..1] of the converted color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.ConvertToCielabColor(System.Drawing.Color)">
            <summary>
            Convert a given <see cref="T:System.Drawing.Color"/> to a CIE LAB color (LAB)
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The lightness [0..100] and two chromaticities [-128..127]</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.ConvertToCiexyzColor(System.Drawing.Color)">
            <summary>
            Convert a given <see cref="T:System.Drawing.Color"/> to a CIE XYZ color (XYZ)
            The constants of the formula matches this Wikipedia page, but at a higher precision:
            https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation_(sRGB_to_CIE_XYZ)
            This page provides a method to calculate the constants:
            http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The X [0..1], Y [0..1] and Z [0..1]</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.GetCielabColorFromCieXyz(System.Double,System.Double,System.Double)">
            <summary>
            Convert a CIE XYZ color <see cref="T:System.Double"/> to a CIE LAB color (LAB) adapted to sRGB D65 white point
            The constants of the formula used come from this wikipedia page:
            https://en.wikipedia.org/wiki/CIELAB_color_space#Converting_between_CIELAB_and_CIEXYZ_coordinates
            </summary>
            <param name="x">The x represents a mix of the three CIE RGB curves</param>
            <param name="y">The y represents the luminance</param>
            <param name="z">The z is quasi-equal to blue (of CIE RGB)</param>
            <returns>The lightness [0..100] and two chromaticities [-128..127]</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.ConvertToNaturalColor(System.Drawing.Color)">
            <summary>
            Convert a given <see cref="T:System.Drawing.Color"/> to a natural color (hue, whiteness, blackness)
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>The hue, whiteness [0..1] and blackness [0..1] of the converted color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorFormatUtils.GetNaturalColorFromHue(System.Double)">
            <summary>
            Return the natural color for the given hue value
            </summary>
            <param name="hue">The hue value to convert</param>
            <returns>A natural color</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils">
            <summary>
                Helper class to easier work with color representation
            </summary>
            <remarks>
                Implementation: https://github.com/microsoft/PowerToys/blob/main/src/modules/colorPicker/ColorPickerUI/Helpers/ColorRepresentationHelper.cs
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToCmyk(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a CMYK color
            </summary>
            <param name="color">The <see cref="T:System.Windows.Media.Color"/> for the CMYK color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a CMYK color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToHex(System.Drawing.Color)">
            <summary>
            Return a hexadecimal <see cref="T:System.String"/> representation of a RGB color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the hexadecimal presentation</param>
            <returns>A hexadecimal <see cref="T:System.String"/> representation of a RGB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToHsb(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HSB color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the HSB color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HSB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToFloat(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation float color styling(0.1f, 0.1f, 0.1f)
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>a string value (0.1f, 0.1f, 0.1f)</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToDecimal(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation decimal color value
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to convert</param>
            <returns>a string value number</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToHsi(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HSI color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the HSI color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HSI color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToHsl(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HSL color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the HSL color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HSL color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToHsv(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HSV color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the HSV color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HSV color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToHwb(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a HWB color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the HWB color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a HWB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToNCol(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a natural color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the natural color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a natural color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToRgb(System.Drawing.Color)">
            <summary>
            Return a <see cref="T:System.String"/> representation of a RGB color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the RGB color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a RGB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToCielab(System.Drawing.Color)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of a CIE LAB color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the CIE LAB color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a CIE LAB color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToCieXyz(System.Drawing.Color)">
            <summary>
            Returns a <see cref="T:System.String"/> representation of a CIE XYZ color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the CIE XYZ color presentation</param>
            <returns>A <see cref="T:System.String"/> representation of a CIE XYZ color</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.Internal.Formats.ColorRepresentationUtils.ColorToHexInteger(System.Drawing.Color)">
            <summary>
            Return a hexadecimal integer <see cref="T:System.String"/> representation of a RGB color
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> for the hexadecimal integer presentation</param>
            <returns>A hexadecimal integer <see cref="T:System.String"/> representation of a RGB color</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.AnalyticalToPhysicalAssociationManagerExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.Structure.AnalyticalToPhysicalAssociationManager"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.AnalyticalToPhysicalAssociationManagerExtensions.GetAnalyticalToPhysicalAssociationManager(Autodesk.Revit.DB.Document)">
            <summary>Returns the AnalyticalToPhysicalAssociationManager for this document.</summary>
            <param name="document">Revit document.</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.AnalyticalToPhysicalAssociationManagerExtensions.IsAnalyticalElement(Autodesk.Revit.DB.Element)">
            <summary>Returns true if the element is an analytical element.</summary>
            <param name="element">The element to be checked.</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.AnalyticalToPhysicalAssociationManagerExtensions.IsPhysicalElement(Autodesk.Revit.DB.Element)">
            <summary>Returns true if the element is a physical element.</summary>
            <param name="element">The element to be checked.</param>
        </member>
        <member name="T:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.GlobalParametersManager"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions.AreGlobalParametersAllowed(Autodesk.Revit.DB.Document)">
            <summary>Tests whether global parameters are allowed in the given document.</summary>
            <remarks>
               First of all, global parameters can be had in main project documents only;
               they are not supported in family documents. However, there may also be other
               circumstances due to which global parameters may be disallowed in a particular
               project, either temporarily or permanently.
            </remarks>
            <param name="document">A revit document of interest.</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions.GetAllGlobalParameters(Autodesk.Revit.DB.Document)">
            <summary>Returns all global parameters available in the given document.</summary>
            <param name="document">The document containing the global parameters</param>
            <returns>A collection of GlobalParameters</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               Global parameters are not supported in the given document.
               A possible cause is that it is not a project document,
               for global parameters are not supported in Revit families.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions.FindGlobalParameter(Autodesk.Revit.DB.Document,System.String)">
            <summary>
               Finds whether a global parameter with the given name exists in the input document.
            </summary>
            <param name="document">The document expected to contain the global parameter.</param>
            <param name="name">Name of the global parameter</param>
            <returns>
               GlobalParameter, or null if it was not found.
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions.IsValidGlobalParameter(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>Tests whether an ElementId is of a global parameter in the given document.</summary>
            <param name="document">The document containing the global parameter.</param>
            <param name="parameterId">Id of a global parameter</param>
            <returns>Returns True if the Id is of a valid global parameter; False otherwise.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions.IsUniqueGlobalParameterName(Autodesk.Revit.DB.Document,System.String)">
            <summary>
               Tests whether a name is unique among existing global parameters of a given document.
            </summary>
            <remarks>
               Typically, this method is used before a new global parameters is created, for
               all global parameters must have their names unique in the scope of a document.
            </remarks>
            <param name="document">Document in which a new parameter is to be added.</param>
            <param name="name">A name of a parameter being added.</param>
            <returns>
               True if the given %name% does not exist yet among existing global parameters nof the document; False otherwise.
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions.GetGlobalParametersOrdered(Autodesk.Revit.DB.Document)">
            <summary>Returns all global parameters in an ordered array.</summary>
            <remarks>
                 <p>The order of the items corresponds to the order at which global parameters
            appear in Revit UI when shown in the standard Global Parameters dialog.
            However, the order of parameters is serialized in the document,
            thus available on the DB level as well.</p>
               </remarks>
            <param name="document">Document containing the requested global parameters</param>
            <returns>A list of Global Parameters in the document.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               Global parameters are not supported in the given document.
               A possible cause is that it is not a project document,
               for global parameters are not supported in Revit families.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions.SortGlobalParameters(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ParametersOrder)">
            <summary>Sorts global parameters in the desired order.</summary>
            <remarks>
                 <p>All global parameters are sorted, but only within the range
            of their respective parameter group.</p>
                 <p>This operation has no effect on the global parameters themselves.
            The sorted order is only visible in the standard Global Parameters
            dialog. However, the order of parameters is serialized in the document,
            thus available on the DB level as well.</p>
               </remarks>
            <param name="document">Document containing the global parameters to be sorted</param>
            <param name="order">Desired sorting order</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               Global parameters are not supported in the given document.
               A possible cause is that it is not a project document,
               for global parameters are not supported in Revit families.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions.MoveUpOrder(Autodesk.Revit.DB.GlobalParameter)">
            <summary>Moves given global parameter Up in the current order.</summary>
            <remarks>
                 <p>A parameter can only be moved within its parameter group, meaning that
            repeated moving a parameter will not push the parameter out of and into
            the next (in order) parameter group. When a parameter can no longer move
            because it is at the boundary of its group, this method returns False.</p>
                 <p>This operation has no effect on the global parameters themselves.
            The rearranged order is only visible in the standard Global Parameters
            dialog. However, the order of parameters is serialized in the document,
            thus available on the DB level as well.</p>
               </remarks>
            <param name="parameter">The parameter to move up</param>
            <returns>Indicates whether the parameter could be moved Up in order or not.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.GlobalParametersManagerExtensions.MoveDownOrder(Autodesk.Revit.DB.GlobalParameter)">
            <summary>Moves given global parameter Down in the current order.</summary>
            <remarks>
                 <p>A parameter can only be moved within its parameter group, meaning that
            repeated moving a parameter will not push the parameter out of and into
            the next (in order) parameter group. When a parameter can no longer move
            because it is at the boundary of its group, this method returns False.</p>
                 <p>This operation has no effect on the global parameters themselves.
            The rearranged order is only visible in the standard Global Parameters
            dialog. However, the order of parameters is serialized in the document,
            thus available on the DB level as well.</p>
               </remarks>
            <param name="parameter">The parameter to move Down</param>
            <returns>Indicates whether the parameter could be moved Down in order or not.</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.LightGroupManagerExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.Lighting.LightGroupManager"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LightGroupManagerExtensions.GetLightGroupManager(Autodesk.Revit.DB.Document)">
            <summary>Creates a light group manager object from the given document</summary>
            <param name="document">The document the manager is from</param>
            <returns>The newly created Light group manager object</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The document is not valid because it is not a project (rvt) document
            </exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.SpatialFieldManagerExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.Analysis.SpatialFieldManager"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SpatialFieldManagerExtensions.CreateSpatialFieldManager(Autodesk.Revit.DB.View,System.Int32)">
            <summary>Factory method - creates manager object for the given view</summary>
            <param name="view">View for which manager object is created or retrieved</param>
            <param name="numberOfMeasurements">
               Total number of measurements in the calculated results.
               This number defines the length of value arrays in ValueAtPoint objects
            </param>
            <returns>Manager object for the view passed in the argument</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               numberOfMeasurements is less than one
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               View is not allowed to display analysis results or a manager object for this view already exists
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SpatialFieldManagerExtensions.GetSpatialFieldManager(Autodesk.Revit.DB.View)">
            <summary>Retrieves manager object for the given view or returns NULL</summary>
            <param name="view">View for which manager object is retrieved</param>
            <returns>Manager object for the view passed in the argument</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.TemporaryGraphicsManagerExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.TemporaryGraphicsManager"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.TemporaryGraphicsManagerExtensions.GetTemporaryGraphicsManager(Autodesk.Revit.DB.Document)">
            <summary>Gets a TemporaryGraphicsManager reference of the document.</summary>
            <param name="document">The document.</param>
            <returns>Instance of TemporaryGraphicsManager.</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.ParameterExtensions">
            <summary>
                Revit Parameter Extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterExtensions.AsBool(Autodesk.Revit.DB.Parameter)">
            <summary>Provides access to the boolean value within the parameter</summary>
            <param name="parameter">The parameter</param>
            <returns>The bool value contained in the parameter</returns>
            <remarks>The AsBool method should only be used if the StorageType property returns that the internal contents of the parameter is an integer</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterExtensions.AsColor(Autodesk.Revit.DB.Parameter)">
            <summary>Provides access to the Color within the parameter</summary>
            <param name="parameter">The parameter</param>
            <returns>The Color value contained in the parameter</returns>
            <remarks>The AsColor method should only be used if the StorageType property returns that the internal contents of the parameter is an integer</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterExtensions.AsElement(Autodesk.Revit.DB.Parameter)">
            <summary>Provides access to the Element within the parameter</summary>
            <param name="parameter">The parameter</param>
            <returns>The element contained in the parameter as an ElementId</returns>
            <remarks>The AsElement method should only be used if the StorageType property returns that the internal contents of the parameter is an ElementId</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterExtensions.AsElement``1(Autodesk.Revit.DB.Parameter)">
            <summary>Provides access to the Element within the parameter</summary>
            <param name="parameter">The parameter</param>
            <returns>The element contained in the parameter as an ElementId</returns>
            <remarks>The AsElement method should only be used if the StorageType property returns that the internal contents of the parameter is an ElementId</remarks>
            <typeparam name="T">Type inherited from <see cref="T:Autodesk.Revit.DB.Element" /></typeparam>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterExtensions.Set(Autodesk.Revit.DB.Parameter,System.Boolean)">
            <summary>Sets the parameter to a new bool value</summary>
            <param name="parameter">The parameter</param>
            <param name="value">The new bool value to which the parameter is to be set</param>
            <returns>The Set method will return True if the parameter was successfully set to the new value, otherwise false</returns>
            <remarks>You should only use this method if the StorageType property reports the type of the parameter as an integer</remarks>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">The parameter is read-only</exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterExtensions.Set(Autodesk.Revit.DB.Parameter,Autodesk.Revit.DB.Color)">
            <summary>Sets the parameter to a new color</summary>
            <param name="parameter">The parameter</param>
            <param name="value">The new color to which the parameter is to be set</param>
            <returns>The Set method will return True if the parameter was successfully set to the new value, otherwise false</returns>
            <remarks>You should only use this method if the StorageType property reports the type of the parameter as an integer</remarks>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">The parameter is read-only</exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.PresentationFrameworkExtensions">
            <summary>
                System PresentationFramework Extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.PresentationFrameworkExtensions.Show(System.Windows.Window,System.IntPtr)">
            <summary>
                Opens a window and returns without waiting for the newly opened window to close. Sets the owner of a child window
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (
                <see cref="E:System.Windows.Window.Closed" />)
            </exception>
            <param name="window">Child window</param>
            <param name="handle">Owner window handle</param>
            <example>
                <code>
                    _view.Show(uiApplication.MainWindowHandle)
                </code>
            </example>
        </member>
        <member name="T:Nice3point.Revit.Extensions.SchemaExtensions">
            <summary>
                Revit schema extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SchemaExtensions.SaveEntity``1(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.ExtensibleStorage.Schema,``0,System.String)">
            <summary>
               Stores data in the element. Existing data is overwritten
            </summary>
            <param name="element">The element that will store the data</param>
            <param name="schema">Existing schema</param>
            <param name="data">Type of data</param>
            <param name="fieldName">The Field name</param>
            <typeparam name="T">The type of data to be stored in the schema. The type must match the type of data specified in the SchemaBuilder</typeparam>
            <returns>True if entity save succeeded</returns>
            <example>
                <code>
                    wall.SaveEntity(schema, "Factory", "Manufacturer")
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SchemaExtensions.LoadEntity``1(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.ExtensibleStorage.Schema,System.String)">
            <summary>
                Retrieves the value stored in the schema from the element
            </summary>
            <param name="element">The element that stores the data</param>
            <param name="schema">Existing schema</param>
            <param name="fieldName">The Field name</param>
            <typeparam name="T">The type of data to be stored in the schema. The type must match the type of data specified in the SchemaBuilder</typeparam>
            <returns>Data stored in the element. null will be returned if the field does not exist or the data has not been saved before</returns>
            <example>
                <code>
                    var value = wall.LoadEntity&lt;string&lt;(schema, "Manufacturer")
                </code>
            </example>
        </member>
        <member name="T:Nice3point.Revit.Extensions.SystemExtensions">
            <summary>
                System.String Extensions
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.Cast``1(System.Object)">
            <summary>
                Converts an object's type to <typeparamref name="T"/> type
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.Round(System.Double)">
            <summary>
                Rounds a value within the minimum allowed by Revit
            </summary>
            <param name="source">A double-precision floating-point number to be rounded</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.Round(System.Double,System.Int32)">
            <summary>
                Rounds a decimal value to a specified number of fractional digits, and rounds midpoint values to the nearest even number
            </summary>
            <param name="source">A double-precision floating-point number to be rounded</param>
            <param name="digits">The number of fractional digits in the return value</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Digits is less than 0 or greater than 15</exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.IsAlmostEqual(System.Double,System.Double)">
            <summary>
                Compares a decimal value within the minimum allowed by Revit
            </summary>
            <returns>True if equal</returns>
            <example>1e-15.IsAlmostEqual(0)</example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.IsAlmostEqual(System.Double,System.Double,System.Double)">
            <summary>
                Compares the decimal value to the specified tolerance
            </summary>
            <returns>True if equal</returns>
            <example>0.09999.IsAlmostEqual(0.1, 1e-3)</example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.IsNullOrEmpty(System.String)">
            <summary>
                Indicates whether the specified string is null or an empty string ("")
            </summary>
            <param name="source">The string to test</param>
            <returns>True if the value parameter is null or an empty string (""); otherwise, false</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
                Indicates whether a specified string is null, empty, or consists only of white-space characters
            </summary>
            <param name="source">The string to test</param>
            <returns>True if the value parameter is null or Empty, or if value consists exclusively of white-space characters</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.AppendPath(System.String,System.String)">
            <summary>
                Combines strings into a path
            </summary>
            <returns>
                The combined paths.
                If one of the specified paths is a zero-length string, this method returns the other path.
                If path2 contains an absolute path, this method returns path2.
            </returns>
            <exception cref="T:System.ArgumentException">
                NET Framework and .NET Core versions older than 2.1: path1 or path2 contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />
            </exception>
            <exception cref="T:System.ArgumentNullException">source or path is null</exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.AppendPath(System.String,System.String[])">
            <summary>
                Combines strings into a path
            </summary>
            <returns>The combined paths</returns>
            <exception cref="T:System.ArgumentException">
                NET Framework and .NET Core versions older than 2.1: path1 or path2 contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />
            </exception>
            <exception cref="T:System.ArgumentNullException">source or path is null</exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SystemExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <param name="source">Source string</param>
            <param name="value">The string to seek</param>
            <param name="comparison">One of the enumeration values that specifies the rules for the search</param>
            <returns>True if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.RibbonExtensions">
            <summary>
                Contains extension methods for creating and managing custom Ribbon elements in the Revit UI.
                These extensions provide simplified methods for adding panels, buttons, and other controls 
                to the "Add-ins" tab or any custom tab in the Revit ribbon.
                These utilities streamline the process of integrating external commands and tools 
                into the Revit user interface.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.CreatePanel(Autodesk.Revit.UI.UIControlledApplication,System.String)">
            <summary>
                Creates or retrieves an existing panel in the "Add-ins" tab of the Revit ribbon.
            </summary>
            <param name="application">The Revit application instance.</param>
            <param name="panelName">The name of the panel to create.</param>
            <returns>The created or existing Ribbon panel.</returns>
            <remarks>
                If a panel with the specified name already exists in the "Add-ins" tab, it will return that panel.
                Otherwise, a new panel will be created with the given name.
            </remarks>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">Thrown when the panelName is empty.</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                Thrown if more than 100 panels were created in the session.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.CreatePanel(Autodesk.Revit.UI.UIControlledApplication,System.String,System.String)">
            <summary>
                Creates or retrieves an existing panel in a specified tab of the Revit ribbon.
            </summary>
            <param name="application">The Revit application instance.</param>
            <param name="panelName">The name of the panel to create.</param>
            <param name="tabName">The name of the tab in which the panel should be located.</param>
            <returns>The created or existing Ribbon panel.</returns>
            <remarks>
                If the tab doesn't exist, it will be created first. <br />
                If a panel with the specified name already exists within the tab, it will return that panel; otherwise, a new one will be created. <br />
                Adding a panel also supports built-in tabs.
                To add a panel to the built-in Revit tab, specify the panel ID or name as the <paramref name="tabName"/> parameter.
            </remarks>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">Thrown when <paramref name="panelName"/> or <paramref name="tabName"/> is empty.</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                Thrown if more than 100 panels were created, or if the maximum number of custom tabs (20) has been exceeded.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.RemovePanel(Autodesk.Revit.UI.RibbonPanel)">
            <summary>
                Removes a specified <see cref="T:Autodesk.Revit.UI.RibbonPanel"/> from the Revit ribbon.
            </summary>
            <param name="panel">The <see cref="T:Autodesk.Revit.UI.RibbonPanel"/> to remove.</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetBackground(Autodesk.Revit.UI.RibbonPanel,System.String)">
            <summary>
                Sets the panel background color.
            </summary>
            <param name="panel">The target Ribbon panel</param>
            <param name="color">The color string representing the background color.</param>
            <returns>The Ribbon panel with the updated background.</returns>
            <example>
                <code>
                    panel.SetBackground("Red");
                    panel.SetBackground("#FF6669");
                    panel.SetBackground("#FFFF6669");
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetBackground(Autodesk.Revit.UI.RibbonPanel,System.Windows.Media.Color)">
            <summary>
                Sets the panel background color.
            </summary>
            <param name="panel">The target Ribbon panel</param>
            <param name="color">The Color object representing the background color.</param>
            <returns>The Ribbon panel with the updated background.</returns>
            <example>
                <code>
                    panel.SetBackground(Colors.Red);
                    panel.SetBackground(Color.FromRgb(255, 0, 0));
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetBackground(Autodesk.Revit.UI.RibbonPanel,System.Windows.Media.Brush)">
            <summary>
                Sets the panel background color.
            </summary>
            <param name="panel">The target Ribbon panel</param>
            <param name="brush">The Brush representing the background.</param>
            <returns>The Ribbon panel with the updated background.</returns>
            <example>
                <code>
                    panel.SetBackground(Brushes.Red);
                    panel.SetBackground(new SolidColorBrush(Colors.Red));
                    panel.SetBackground(new LinearGradientBrush(
                    [
                        new GradientStop(Colors.Red, 0),
                        new GradientStop(Colors.Black, 1)
                    ], 45));
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetTitleBarBackground(Autodesk.Revit.UI.RibbonPanel,System.String)">
            <summary>
                Sets the panel title bar background color.
            </summary>
            <param name="panel">The target Ribbon panel</param>
            <param name="color">The color string representing the background color.</param>
            <returns>The Ribbon panel with the updated title bar background.</returns>
            <example>
                <code>
                    panel.SetTitleBarBackground("Red");
                    panel.SetTitleBarBackground("#FF6669");
                    panel.SetTitleBarBackground("#FFFF6669");
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetTitleBarBackground(Autodesk.Revit.UI.RibbonPanel,System.Windows.Media.Color)">
            <summary>
                Sets the panel title bar background color.
            </summary>
            <param name="panel">The target Ribbon panel</param>
            <param name="color">The Color object representing the background color.</param>
            <returns>The Ribbon panel with the updated title bar background.</returns>
            <example>
                <code>
                    panel.SetTitleBarBackground(Colors.Red);
                    panel.SetTitleBarBackground(Color.FromRgb(255, 0, 0));
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetTitleBarBackground(Autodesk.Revit.UI.RibbonPanel,System.Windows.Media.Brush)">
            <summary>
                Sets the panel title bar background color.
            </summary>
            <param name="panel">The target Ribbon panel</param>
            <param name="brush">The Brush representing the background.</param>
            <returns>The Ribbon panel with the updated title bar background.</returns>
            <example>
                <code>
                    panel.SetTitleBarBackground(Brushes.Red);
                    panel.SetTitleBarBackground(new SolidColorBrush(Colors.Red));
                    panel.SetTitleBarBackground(new LinearGradientBrush(
                    [
                        new GradientStop(Colors.Red, 0),
                        new GradientStop(Colors.Black, 1)
                    ], 45));
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetSlideOutPanelBackground(Autodesk.Revit.UI.RibbonPanel,System.String)">
            <summary>
                Sets the slide-out panel background color for the target panel.
            </summary>
            <param name="panel">The target Ribbon panel</param>
            <param name="color">The color string representing the background color.</param>
            <returns>The Ribbon panel with the updated slide-out panel background.</returns>
            <example>
                <code>
                    panel.SetSlideOutPanelBackground("Red");
                    panel.SetSlideOutPanelBackground("#FF6669");
                    panel.SetSlideOutPanelBackground("#FFFF6669");
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetSlideOutPanelBackground(Autodesk.Revit.UI.RibbonPanel,System.Windows.Media.Color)">
            <summary>
                Sets the slide-out panel background color for the target panel.
            </summary>
            <param name="panel">The target Ribbon panel</param>
            <param name="color">The Color object representing the background color.</param>
            <returns>The Ribbon panel with the updated slide-out panel background.</returns>
            <example>
                <code>
                    panel.SetSlideOutPanelBackground(Colors.Red);
                    panel.SetSlideOutPanelBackground(Color.FromRgb(255, 0, 0));
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetSlideOutPanelBackground(Autodesk.Revit.UI.RibbonPanel,System.Windows.Media.Brush)">
            <summary>
                Sets the slide-out panel background color for the target panel.
            </summary>
            <param name="panel">The target Ribbon panel</param>
            <param name="brush">The Brush representing the background.</param>
            <returns>The Ribbon panel with the updated slide-out panel background.</returns>
            <example>
                <code>
                    panel.SetSlideOutPanelBackground(Brushes.Red);
                    panel.SetSlideOutPanelBackground(new SolidColorBrush(Colors.Red));
                    panel.SetSlideOutPanelBackground(new LinearGradientBrush(
                    [
                        new GradientStop(Colors.Red, 0),
                        new GradientStop(Colors.Black, 1)
                    ], 45));
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddStackPanel(Autodesk.Revit.UI.RibbonPanel)">
            <summary>
                Adds a vertical stack panel to the specified Ribbon panel.
            </summary>
            <param name="panel">The Ribbon panel to which the stack panel will be added.</param>
            <returns>An <see cref="T:Autodesk.Revit.UI.IRibbonStackPanel"/> instance representing the newly added stack panel.</returns>
            <remarks>
                By default, the StackPanel accommodates one to three elements vertically. If the added items exceed the maximum threshold, they will be automatically added to a new column.
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddPushButton(Autodesk.Revit.UI.RibbonPanel,System.Type,System.String)">
            <summary>
                Adds a PushButton to the specified Ribbon panel.
            </summary>
            <param name="panel">The Ribbon panel to which the button will be added.</param>
            <param name="command">The type of the external command associated with the button.</param>
            <param name="buttonText">The label text for the button.</param>
            <returns>The newly added PushButton.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a PushButton with the same Command already exists in the panel.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddPushButton``1(Autodesk.Revit.UI.RibbonPanel,System.String)">
            <summary>
                Adds a PushButton to the specified Ribbon panel.
            </summary>
            <typeparam name="TCommand">The type of the command that implements <see cref="T:Autodesk.Revit.UI.IExternalCommand"/>.</typeparam>
            <param name="panel">The Ribbon panel to which the button will be added.</param>
            <param name="buttonText">The label text for the button.</param>
            <returns>The newly added PushButton.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a PushButton with the same Command already exists in the panel.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddPushButton(Autodesk.Revit.UI.PulldownButton,System.Type,System.String)">
            <summary>
                Adds a PushButton to the specified PullDownButton in the Ribbon.
            </summary>
            <param name="pullDownButton">The PullDownButton to which the PushButton will be added.</param>
            <param name="command">The type of the external command associated with the button.</param>
            <param name="buttonText">The label text for the button.</param>
            <returns>The newly added PushButton.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a PushButton with the same Command already exists in the PullDownButton.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddPushButton``1(Autodesk.Revit.UI.PulldownButton,System.String)">
            <summary>
                Adds a PushButton to the specified PullDownButton in the Ribbon.
            </summary>
            <typeparam name="TCommand">The type of the command that implements <see cref="T:Autodesk.Revit.UI.IExternalCommand"/>.</typeparam>
            <param name="pullDownButton">The PullDownButton to which the PushButton will be added.</param>
            <param name="buttonText">The label text for the button.</param>
            <returns>The newly added PushButton.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a PushButton with the same Command already exists in the PullDownButton.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddPullDownButton(Autodesk.Revit.UI.RibbonPanel,System.String)">
            <summary>
                Adds a PullDownButton to the specified Ribbon panel.
            </summary>
            <param name="panel">The Ribbon panel to which the PullDownButton will be added.</param>
            <param name="buttonText">The label text for the PullDownButton.</param>
            <returns>The added PullDownButton.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddPullDownButton(Autodesk.Revit.UI.RibbonPanel,System.String,System.String)">
            <summary>
                Adds a PullDownButton to the specified Ribbon panel with a unique internal name.
            </summary>
            <param name="panel">The Ribbon panel to which the PullDownButton will be added.</param>
            <param name="internalName">A unique internal name for the PullDownButton.</param>
            <param name="buttonText">The label text for the PullDownButton.</param>
            <returns>The added PullDownButton.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a PullDownButton with the same internalName already exists in the panel.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddSplitButton(Autodesk.Revit.UI.RibbonPanel,System.String)">
            <summary>
                Adds a SplitButton to the specified Ribbon panel.
            </summary>
            <param name="panel">The Ribbon panel to which the SplitButton will be added.</param>
            <param name="buttonText">The label text for the SplitButton.</param>
            <returns>The added SplitButton.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddSplitButton(Autodesk.Revit.UI.RibbonPanel,System.String,System.String)">
            <summary>
                Adds a SplitButton to the specified Ribbon panel with a unique internal name.
            </summary>
            <param name="panel">The Ribbon panel to which the SplitButton will be added.</param>
            <param name="internalName">A unique internal name for the SplitButton.</param>
            <param name="buttonText">The label text for the SplitButton.</param>
            <returns>The added SplitButton.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a SplitButton with the same internalName already exists in the panel.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddRadioButtonGroup(Autodesk.Revit.UI.RibbonPanel)">
            <summary>
                Adds a RadioButtonGroup to the specified Ribbon panel.
            </summary>
            <param name="panel">The Ribbon panel to which the RadioButtonGroup will be added.</param>
            <returns>The added RadioButtonGroup.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddRadioButtonGroup(Autodesk.Revit.UI.RibbonPanel,System.String)">
            <summary>
                Adds a RadioButtonGroup to the specified Ribbon panel with a unique internal name.
            </summary>
            <param name="panel">The Ribbon panel to which the RadioButtonGroup will be added.</param>
            <param name="internalName">A unique internal name for the RadioButtonGroup.</param>
            <returns>The added RadioButtonGroup.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a RadioButtonGroup with the same internalName already exists in the panel.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddComboBox(Autodesk.Revit.UI.RibbonPanel)">
            <summary>
                Adds a ComboBox to the specified Ribbon panel.
            </summary>
            <param name="panel">The Ribbon panel to which the ComboBox will be added.</param>
            <returns>The added ComboBox.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddComboBox(Autodesk.Revit.UI.RibbonPanel,System.String)">
            <summary>
                Adds a ComboBox to the specified Ribbon panel with a unique internal name.
            </summary>
            <param name="panel">The Ribbon panel to which the ComboBox will be added.</param>
            <param name="internalName">A unique internal name for the ComboBox.</param>
            <returns>The added ComboBox.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a ComboBox with the same internalName already exists in the panel.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddTextBox(Autodesk.Revit.UI.RibbonPanel)">
            <summary>
                Adds a TextBox to the specified Ribbon panel.
            </summary>
            <param name="panel">The Ribbon panel to which the TextBox will be added.</param>
            <returns>The added TextBox.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddTextBox(Autodesk.Revit.UI.RibbonPanel,System.String)">
            <summary>
                Adds a TextBox to the specified Ribbon panel with a unique internal name.
            </summary>
            <param name="panel">The Ribbon panel to which the TextBox will be added.</param>
            <param name="internalName">A unique internal name for the TextBox.</param>
            <returns>The added TextBox.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a TextBox with the same internalName already exists in the panel.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetImage(Autodesk.Revit.UI.RibbonButton,System.String)">
            <summary>
                Sets a 16x16 pixel, 96dpi image from the specified URI source to the given Ribbon button.
            </summary>
            <param name="button">The Ribbon button to which the image will be added.</param>
            <param name="uri">The URI path to the image. Can be relative or absolute.</param>
            <returns>The Ribbon button with the added image.</returns>
            <example>
                button.SetImage("/RevitAddIn;component/Resources/Icons/RibbonIcon16.png")
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetLargeImage(Autodesk.Revit.UI.RibbonButton,System.String)">
            <summary>
                Sets a 32x32 pixel, 96dpi image from the specified URI source to the given Ribbon button.
            </summary>
            <param name="button">The Ribbon button to which the large image will be added.</param>
            <param name="uri">The URI path to the image. Can be relative or absolute.</param>
            <returns>The Ribbon button with the added large image.</returns>
            <example>
                button.SetLargeImage("/RevitAddIn;component/Resources/Icons/RibbonIcon32.png")
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetAvailabilityController``1(Autodesk.Revit.UI.PushButton)">
            <summary>
                Sets the availability controller class for a PushButton. 
                This class determines when the PushButton will be enabled or disabled in the Revit UI.
            </summary>
            <typeparam name="T">A class that implements <see cref="T:Autodesk.Revit.UI.IExternalCommandAvailability"/>.</typeparam>
            <param name="button">The PushButton to which the availability controller will be set.</param>
            <returns>The PushButton with the set availability controller.</returns>
            <remarks>
                The availability controller must share the same assembly as the external command.
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddShortcuts(Autodesk.Revit.UI.PushButton,System.String)">
            <summary>
                Adds keyboard shortcuts to the specified <see cref="T:Autodesk.Revit.UI.PushButton"/> using the provided string representation.
            </summary>
            <param name="button">The <see cref="T:Autodesk.Revit.UI.PushButton"/> to which the shortcuts will be added.</param>
            <param name="representation">A string representation of the shortcuts.</param>
            <returns>The <see cref="T:Autodesk.Revit.UI.PushButton"/> with the added shortcuts.</returns>
            <remarks>The representation can be a single shortcut, or a group of shortcuts with a '#' delimiter</remarks>
            <example>
                <code>
                    button.AddShortcuts("RE");
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddShortcuts(Autodesk.Revit.UI.PushButton,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds keyboard shortcuts to the specified <see cref="T:Autodesk.Revit.UI.PushButton"/> using the provided collection of shortcut strings.
            </summary>
            <param name="button">The <see cref="T:Autodesk.Revit.UI.PushButton"/> to which the shortcuts will be added.</param>
            <param name="shortcuts">A collection of shortcut strings to be added to the button.</param>
            <returns>The <see cref="T:Autodesk.Revit.UI.PushButton"/> with the added shortcuts.</returns>
            <example>
                <code>
                    button.AddShortcuts("RE", "NP", "QQ");
                </code>
            </example>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetToolTip(Autodesk.Revit.UI.RibbonItem,System.String)">
            <summary>
                Sets the tooltip text for the RibbonItem.
            </summary>
            <param name="button">The RibbonItem to which the tooltip will be added.</param>
            <param name="tooltip">The text to display as a tooltip when the mouse pointer hovers over the button.</param>
            <returns>The RibbonItem with the specified tooltip text.</returns>
            <remarks>
                The tooltip text appears when the mouse pointer hovers over the button in the Revit UI. 
                This method does not affect SplitButton or RadioButtonGroup controls. For SplitButton, the current PushButton's tooltip will always be displayed.
                RadioButtonGroup controls do not support tooltips.
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.SetLongDescription(Autodesk.Revit.UI.RibbonItem,System.String)">
            <summary>
                Sets the extended tooltip description for the RibbonItem.
            </summary>
            <param name="button">The RibbonItem to which the extended tooltip description will be added.</param>
            <param name="description">
                The text to display as part of the button's extended tooltip. 
                This text is shown when the mouse hovers over the button for a prolonged period. 
                Use &lt;p&gt; tags to separate the text into multiple paragraphs if needed.
            </param>
            <returns>The RibbonItem with the specified extended tooltip description.</returns>
            <remarks>
                The extended tooltip provides additional information about the command and is optional. 
                If neither this property nor the TooltipImage is set, the button will not have an extended tooltip. 
                SplitButton and RadioButtonGroup controls cannot display the extended tooltip set by this method. 
                For SplitButton, the current PushButton's tooltip is always displayed, while RadioButtonGroup does not support extended tooltips.
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.AddButtonShortcuts(Autodesk.Revit.UI.PushButton,System.String)">
            <summary>
                Adds keyboard shortcuts for the specified <see cref="T:Autodesk.Revit.UI.PushButton"/> using the provided string representation.
            </summary>
            <param name="button">The <see cref="T:Autodesk.Revit.UI.PushButton"/> to which the shortcuts will be applied.</param>
            <param name="representation">A string representation of the shortcuts, where each shortcut is separated by the '#' character.</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.CreatePanel(Autodesk.Windows.RibbonPanel,System.String)">
            <summary>
                Creates a new <see cref="T:Autodesk.Revit.UI.RibbonPanel"/> using the specified internal <see cref="T:Autodesk.Windows.RibbonPanel"/>.
            </summary>
            <param name="panel">The internal <see cref="T:Autodesk.Windows.RibbonPanel"/> instance.</param>
            <param name="tabId">The ID of the tab where the panel should be added.</param>
            <returns>The created <see cref="T:Autodesk.Revit.UI.RibbonPanel"/>.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.CreateInternalPanel(System.String,System.String)">
            <summary>
                Creates a new internal <see cref="T:Autodesk.Windows.RibbonPanel"/> and its corresponding <see cref="T:Autodesk.Revit.UI.RibbonPanel"/> for the specified tab and panel name.
            </summary>
            <param name="tabId">The ID of the tab where the panel should be added.</param>
            <param name="panelName">The name of the panel to create.</param>
            <returns>A tuple containing the internal <see cref="T:Autodesk.Windows.RibbonPanel"/> and the corresponding <see cref="T:Autodesk.Revit.UI.RibbonPanel"/>.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.GetCachedTabs">
            <summary>
                Retrieves the cached dictionary of tabs and panels within the Revit application.
            </summary>
            <returns>A dictionary where keys are tab IDs and values are dictionaries of tab names and their corresponding <see cref="T:Autodesk.Revit.UI.RibbonPanel"/> instances.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.GetInternalItem(Autodesk.Revit.UI.RibbonItem)">
            <summary>
                Retrieves the internal <see cref="T:Autodesk.Windows.RibbonItem"/> instance associated with the specified <see cref="T:Autodesk.Revit.UI.RibbonItem"/>.
                This method uses reflection to access the private field "m_RibbonItem" within the provided <see cref="T:Autodesk.Revit.UI.RibbonItem"/>.
            </summary>
            <param name="ribbonItem">The <see cref="T:Autodesk.Revit.UI.RibbonItem"/> to extract the internal <see cref="T:Autodesk.Windows.RibbonItem"/> from.</param>
            <returns>The internal <see cref="T:Autodesk.Windows.RibbonItem"/> instance.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.RibbonExtensions.GetInternalPanel(Autodesk.Revit.UI.RibbonPanel)">
            <summary>
                Retrieves the internal <see cref="T:Autodesk.Windows.RibbonPanel"/> instance associated with the specified <see cref="T:Autodesk.Revit.UI.RibbonPanel"/>.
                This method uses reflection to access the private field "m_RibbonPanel" within the provided <see cref="T:Autodesk.Revit.UI.RibbonPanel"/>.
            </summary>
            <param name="panel">The <see cref="T:Autodesk.Revit.UI.RibbonPanel"/> to extract the internal <see cref="T:Autodesk.Windows.RibbonPanel"/> from.</param>
            <returns>The internal <see cref="T:Autodesk.Windows.RibbonPanel"/> instance.</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.DocumentValidationExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.DocumentValidation"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.DocumentValidationExtensions.CanDeleteElement(Autodesk.Revit.DB.Element)">
            <summary>Indicates if an element can be deleted.</summary>
            <param name="element">The element to check.</param>
            <returns>True if the element can be deleted, false otherwise.</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.ElementTransformUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.CanBeMirrored(Autodesk.Revit.DB.Element)">
            <summary>Determines whether element can be mirrored</summary>
            <returns>True if the element can be mirrored</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.CanMirrorElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            <summary>Determines whether elements can be mirrored.</summary>
            <param name="document">The document where the elements reside.</param>
            <param name="elementIds">The elements identified by id.</param>
            <returns>True if the elements can be mirrored.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.Mirror(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Plane)">
            <summary>Creates a mirrored copy of an element about a given plane</summary>
            <param name="element">The element to mirror</param>
            <param name="plane">The mirror plane</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Element cannot be mirrored
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.MirrorElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Plane,System.Boolean)">
            <summary>Mirrors a set of elements about a given plane.</summary>
            <remarks>
               Optionally, copies of the elements can be created prior to the operation and mirroring is then performed on the copies instead of the original elements.
            </remarks>
            <param name="document">The document that owns the elements.</param>
            <param name="elementsToMirror">The set of elements to mirror.</param>
            <param name="plane">The mirror plane.</param>
            <param name="mirrorCopies">
               True if mirroring should be performed on copies of the elements, leaving the original elements intact.
               False if no copies should be created and the elements should be mirrored directly.
            </param>
            <returns>
               A collection of ids of newly created elements - mirrored copies. It is empty if the mirrorCopies arguments is false.
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               elementsToMirror cannot be mirrored.
               -or-
               The given element id set is empty.
               -or-
               One or more elements in elementsToMirror do not exist in the document.
               -or-
               Some of the elements cannot be copied, because they belong to different views.
               -or-
               The input set of elements contains Sketch members along with other elements or there is no active Sketch edit mode.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Thrown when the elements cannot be moved (e.g. due to some of the elements being pinned).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.Move(Autodesk.Revit.DB.Element,System.Double,System.Double,System.Double)">
            <summary>
                Moves the element by the specified offset
            </summary>
            <param name="element">The element to move</param>
            <param name="deltaX">Offset along the X axis</param>
            <param name="deltaY">Offset along the Y axis</param>
            <param name="deltaZ">Offset along the Z axis</param>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                If we are not able to move the element (for example, if it is pinned) or move operation failed
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.Move(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.XYZ)">
            <summary>
                Moves the element by the specified vector
            </summary>
            <param name="element">The element to move</param>
            <param name="vector">The translation vector for the elements</param>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                If we are not able to move the element (for example, if it is pinned) or move operation failed
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.MoveElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.XYZ)">
            <summary>Moves a set of elements by a given transformation.</summary>
            <param name="document">The document that owns the elements.</param>
            <param name="elementsToMove">The set of elements to move.</param>
            <param name="translation">The translation vector for the elements.</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The given element id set is empty.
               -or-
               One or more elements in elementsToMove do not exist in the document.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               If we are not able to move all the elements (for example, if one or more elements is pinned).
               -or-
               Move operation failed.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.Rotate(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Line,System.Double)">
            <summary>Rotates an element about the given axis and angle</summary>
            <param name="element">The element to rotate</param>
            <param name="axis">The axis of rotation</param>
            <param name="angle">The angle of rotation in radians</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.RotateElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Line,System.Double)">
            <summary>Rotates a set of elements about the given axis and angle.</summary>
            <param name="document">The document that owns the elements.</param>
            <param name="elementsToRotate">The set of elements to rotate.</param>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The given element id set is empty.
               -or-
               One or more elements in elementsToRotate do not exist in the document.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.GetTransformFromViewToView(Autodesk.Revit.DB.View,Autodesk.Revit.DB.View)">
            <summary>
               Returns a transformation that is applied to elements when copying from one view to another view.
            </summary>
            <remarks>
               Both source and destination views must be 2D graphics views capable of drawing details and view-specific elements (floor and ceiling plans, elevations, sections, drafting views.)
               The result is a transformation needed to copy an element from drawing plane of the source view to the drawing plane of the destination view.
               The destination view can be in the same document as the source view.
               The destination view can be the same as the source view.
            </remarks>
            <param name="sourceView">The source view</param>
            <param name="destinationView">The destination view</param>
            <returns>The transformation from source view to destination view.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The specified view cannot be used as a source or destination for copying elements between two views.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.Copy(Autodesk.Revit.DB.Element,System.Double,System.Double,System.Double)">
            <summary>
                Copies an element and places the copy at a location indicated by a given transformation
            </summary>
            <param name="element">The element to copy</param>
            <param name="deltaX">Offset along the X axis</param>
            <param name="deltaY">Offset along the Y axis</param>
            <param name="deltaZ">Offset along the Z axis</param>
            <returns>The ids of the newly created copied elements. More than one element may be created due to dependencies</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                If we are not able to copy the element
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.Copy(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.XYZ)">
            <summary>
                Copies an element and places the copy at a location indicated by a given transformation
            </summary>
            <param name="element">The element to copy</param>
            <param name="vector">The translation vector for the new element</param>
            <returns>The ids of the newly created copied elements. More than one element may be created due to dependencies</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                If we are not able to copy the element
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.CopyElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.View,Autodesk.Revit.DB.View)">
            <summary>Copies a set of elements from source view to destination view.</summary>
            <remarks>
                 <p>This method can be used for both view-specific and model elements.</p>
                 <p>Both source and destination views must be 2D graphics views capable of drawing details and view-specific elements (floor and ceiling plans, elevations, sections, drafting views.)
            Drafting views cannot be used as a destination for model elements.</p>
                 <p>The pasted elements are repositioned to ensure proper placement in the destination view (e.g. elevation is changed when copying from a level to a different level.)</p>
                 <p>The destination view can be in the same document as the source view.</p>
                 <p>The destination view can be the same as the source view.</p>
                 <p>All view-specific elements in the set must be specific to the source view. Elements specific to views other than the source view or to multiple views cannot be copied.</p>
                 <p>This method performs rehosting of elements where applicable.</p>
               </remarks>
            <param name="sourceView">
               The view in the source document that contains the elements to copy.
            </param>
            <param name="elementsToCopy">The set of elements to copy.</param>
            <param name="destinationView">
               The view in the destination document that the elements will be pasted into.
            </param>
            <returns>The ids of the newly created copied elements.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The given element id set is empty.
               -or-
               The specified view cannot be used as a source or destination for copying elements between two views.
               -or-
               Some of the elements cannot be copied, because they belong to a different document.
               -or-
               Some of the elements cannot be copied, because they belong to a different view.
               -or-
               The elements cannot be copied into the destination view. Drafting views cannot contain model elements.
               -or-
               The input set of elements contains Sketch members along with other elements and the Sketch Id of those members isn't in the set.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               It is not allowed to copy Sketch members between non-parallel sketches.
               -or-
               The elements cannot be copied.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.OperationCanceledException">
               User cancelled the operation.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.CopyElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.View,Autodesk.Revit.DB.View,Autodesk.Revit.DB.Transform,Autodesk.Revit.DB.CopyPasteOptions)">
            <summary>Copies a set of elements from source view to destination view.</summary>
            <remarks>
                 <p>This method can be used for both view-specific and model elements.</p>
                 <p>Both source and destination views must be 2D graphics views capable of drawing details and view-specific elements (floor and ceiling plans, elevations, sections, drafting views.)
            Drafting views cannot be used as a destination for model elements.</p>
                 <p>The pasted elements are repositioned to ensure proper placement in the destination view (e.g. elevation is changed when copying from a level to a different level.)
            Additional transformation within the destination view can be performed by providing additionalTransform argument. This additional transformation must be within the plane of the destination view.</p>
                 <p>The destination view can be in the same document as the source view.</p>
                 <p>The destination view can be the same as the source view.</p>
                 <p>All view-specific elements in the set must be specific to the source view. Elements specific to views other than the source view or to multiple views cannot be copied.</p>
                 <p>This method performs rehosting of elements where applicable.</p>
               </remarks>
            <param name="sourceView">
               The view in the source document that contains the elements to copy.
            </param>
            <param name="elementsToCopy">The set of elements to copy.</param>
            <param name="destinationView">
               The view in the destination document that the elements will be pasted into.
            </param>
            <param name="additionalTransform">
               The transform for the new elements, in addition to the transformation between the source and destination views. The transformation must be within the plane of the destination view.
            </param>
            <param name="options">
               Optional settings.
            </param>
            <returns>The ids of the newly created copied elements.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The given element id set is empty.
               -or-
               The specified view cannot be used as a source or destination for copying elements between two views.
               -or-
               Some of the elements cannot be copied, because they belong to a different document.
               -or-
               Some of the elements cannot be copied, because they belong to a different view.
               -or-
               The elements cannot be copied into the destination view. Drafting views cannot contain model elements.
               -or-
               The transformation is not within the plane of the destination view.
               -or-
               The input set of elements contains Sketch members along with other elements and the Sketch Id of those members isn't in the set.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               It is not allowed to copy Sketch members between non-parallel sketches.
               -or-
               The elements cannot be copied.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.OperationCanceledException">
               User cancelled the operation.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.CopyElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document)">
            <summary>Copies a set of elements from source document to destination document.</summary>
            <remarks>
              <p>Copies are placed at their respective original locations or locations specified by the optional transformation.</p>
              <p>This method can be used for copying non-view specific elements only. For copying view-specific elements, use the view-specific form of the CopyElements method.</p>
              <p>The destination document can be the same as the source document.</p>
              <p>This method performs rehosting of elements where applicable.</p>
            </remarks>
            <param name="sourceDocument">The document that contains the elements to copy.</param>
            <param name="elementsToCopy">The set of elements to copy.</param>
            <param name="destinationDocument">
               The destination document to paste the elements into.
            </param>
            <returns>The ids of the newly created copied elements.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The given element id set is empty.
               -or-
               One or more elements in elementsToCopy do not exist in the document.
               -or-
               Some of the elements cannot be copied, because they are view-specific.
               -or-
               The input set of elements contains Sketch members along with other elements or there is no active Sketch edit mode.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               It is not allowed to copy Sketch members between non-parallel sketches.
               -or-
               The elements cannot be copied.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.OperationCanceledException">
               User cancelled the operation.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.CopyElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Transform,Autodesk.Revit.DB.CopyPasteOptions)">
            <summary>Copies a set of elements from source document to destination document.</summary>
            <remarks>
              <p>Copies are placed at their respective original locations or locations specified by the optional transformation.</p>
              <p>This method can be used for copying non-view specific elements only. For copying view-specific elements, use the view-specific form of the CopyElements method.</p>
              <p>The destination document can be the same as the source document.</p>
              <p>This method performs rehosting of elements where applicable.</p>
            </remarks>
            <param name="sourceDocument">The document that contains the elements to copy.</param>
            <param name="elementsToCopy">The set of elements to copy.</param>
            <param name="destinationDocument">
               The destination document to paste the elements into.
            </param>
            <param name="transform">
               The transform for the new elements.
            </param>
            <param name="options">
               Optional settings.
            </param>
            <returns>The ids of the newly created copied elements.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The given element id set is empty.
               -or-
               One or more elements in elementsToCopy do not exist in the document.
               -or-
               Some of the elements cannot be copied, because they are view-specific.
               -or-
               The input set of elements contains Sketch members along with other elements or there is no active Sketch edit mode.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               It is not allowed to copy Sketch members between non-parallel sketches.
               -or-
               The elements cannot be copied.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.OperationCanceledException">
               User cancelled the operation.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ElementTransformUtilsExtensions.CopyElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.XYZ)">
            <summary>
               Copies a set of elements and places the copies at a location indicated by a given translation.
            </summary>
            <remarks>
               This method is not suitable for elements that are hosted in other elements as it does not perform rehosting. If you need to rehost your elements in addition
               to copying them, use one of the other CopyElements() overloads.
            </remarks>
            <param name="document">The document that owns the elements.</param>
            <param name="elementsToCopy">The set of elements to copy.</param>
            <param name="translation">The translation vector for the new elements.</param>
            <returns>The ids of the newly created copied elements.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The given element id set is empty.
               -or-
               One or more elements in elementsToCopy do not exist in the document.
               -or-
               Some of the elements cannot be copied, because they belong to different views.
               -or-
               The input set of elements contains Sketch members along with other elements or there is no active Sketch edit mode.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               It is not allowed to copy Sketch members between non-parallel sketches.
               -or-
               If we are not able to copy all the elements.
            </exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.FamilyUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.FamilyUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FamilyUtilsExtensions.CanConvertToFaceHostBased(Autodesk.Revit.DB.Family)">
            <summary>Indicates whether the family can be converted to face host based.</summary>
            <param name="family">The family.</param>
            <returns>
            True if the family can be converted to face-based.
            Otherwise false, which will be returned if there any family instances exist in the project, the family is already face-based, or the family does not have a host.
            Also, false is returned if the family does not belong to one of the following categories:
            <list type="bullet"><item>OST_CommunicationDevices</item><item>OST_DataDevices</item><item>OST_DuctTerminal</item><item>OST_ElectricalEquipment</item><item>OST_ElectricalFixtures</item><item>OST_FireAlarmDevices</item><item>OST_LightingDevices</item><item>OST_LightingFixtures</item><item>OST_MechanicalControlDevices</item><item>OST_MechanicalEquipment</item><item>OST_NurseCallDevices</item><item>OST_PlumbingEquipment</item><item>OST_PlumbingFixtures</item><item>OST_SecurityDevices</item><item>OST_Sprinklers</item><item>OST_TelephoneDevices</item></list></returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FamilyUtilsExtensions.ConvertToFaceHostBased(Autodesk.Revit.DB.Family)">
            <summary>Converts a family to be face host based.</summary>
            <remarks>
               Converts a family hosted by some element other than a face to be hosted by a face. This is done by replacing the existing host (wall, roof, ceiling, floor) with a face.
               Conversion can succeed only if FamilyUtils.FamilyCanConvertToFaceHostBased() returns true.
            </remarks>
            <param name="family">The family.</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The input familyId cannot be converted to face host based.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Failed to convert the family to face host based.
               -or-
               The family is already unhosted.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.FamilyUtilsExtensions.GetProfileSymbols(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ProfileFamilyUsage,System.Boolean)">
            <summary>Gets the profile Family Symbols of the document.</summary>
            <param name="document">The document.</param>
            <param name="profileFamilyUsage">The profile family usage.</param>
            <param name="oneCurveLoopOnly">
               Whether or not to return only profiles with one curve loop.
            </param>
            <returns>The set of profile Family Symbol element ids.</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.HostObjectUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.HostObjectUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.HostObjectUtilsExtensions.GetBottomFaces(Autodesk.Revit.DB.HostObject)">
            <summary>Returns the bottom faces for this host object</summary>
            <remarks>
                This utility supports host objects whose bottom faces represent one of the boundaries of CompoundStructure (such as roofs, floors or ceilings)
            </remarks>
            <param name="host">The host object</param>
            <returns>
                An array of references to the faces which are at the bottom of this element
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                This host object does not support access to top or bottom faces
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.HostObjectUtilsExtensions.GetSideFaces(Autodesk.Revit.DB.HostObject,Autodesk.Revit.DB.ShellLayerType)">
            <summary>
                Returns the major side faces for this host object
            </summary>
            <remarks>
                This utility supports host objects whose CompoundStructure is nominally oriented vertically.
                It outputs faces which are at the boundary of the CompoundStructure (such as Walls and FaceWalls)
            </remarks>
            <param name="host">The host object</param>
            <param name="side">The side of the host object</param>
            <returns>
                An array of references to the faces which are on the given side of this element
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                This host object does not support access to side faces
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.HostObjectUtilsExtensions.GetTopFaces(Autodesk.Revit.DB.HostObject)">
            <summary>
                Returns the top faces for this host object
            </summary>
            <remarks>
                This utility supports host objects whose top faces represent one of the boundaries of CompoundStructure (such as roofs, floors or ceilings)
            </remarks>
            <param name="host">The host object</param>
            <returns>An array of references to the faces which are at the top of this element</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                This host object does not support access to top or bottom faces
            </exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.JoinGeometryUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.JoinGeometryUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.JoinGeometryUtilsExtensions.JoinGeometry(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element)">
            <summary>
                Creates clean joins between two elements that share a common face
            </summary>
            <remarks>
               The visible edge between joined elements is removed. The joined elements then share the same line weight and fill pattern.
               This functionality is not available for family documents.
            </remarks>
            <param name="firstElement">The first element to be joined</param>
            <param name="secondElement">
               The second element to be joined. This element must not be joined to the first element
            </param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The element secondElement was not found in the firstElement document<br />
               The elements are already joined<br />
               The elements cannot be joined<br />
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Please remove or add segments on curtain grids instead of joining or unjoining geometry of the panels
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.JoinGeometryUtilsExtensions.UnjoinGeometry(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element)">
            <summary>
                Removes a join between two elements
            </summary>
            <remarks>This functionality is not available for family documents</remarks>
            <param name="firstElement">The first element to be unjoined</param>
            <param name="secondElement">
               The second element to be unjoined. This element must be joined to the fist element
            </param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The element secondElement was not found in the firstElement document<br />
               The elements are not joined<br />
               The elements cannot be unjoined
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Please remove or add segments on curtain grids instead of joining or unjoining geometry of the panels
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.JoinGeometryUtilsExtensions.AreElementsJoined(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element)">
            <summary>
                Determines whether two elements are joined
            </summary>
            <remarks>This functionality is not available for family documents</remarks>
            <param name="firstElement">The first element</param>
            <param name="secondElement">The second element</param>
            <returns>True if the two elements are joined</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The element secondElement was not found in the firstElement document
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.JoinGeometryUtilsExtensions.GetJoinedElements(Autodesk.Revit.DB.Element)">
            <summary>
                Returns all elements joined to given element
            </summary>
            <remarks>This functionality is not available for family documents</remarks>
            <param name="element">The element</param>
            <returns>The set of elements that are joined to the given element</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.JoinGeometryUtilsExtensions.SwitchJoinOrder(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element)">
            <summary>
                Reverses the order in which two elements are joined
            </summary>
            <remarks>
               The cutting element becomes the cut element and vice versa after the join order is switched
               This functionality is not available for family documents
            </remarks>
            <param name="firstElement">The first element</param>
            <param name="secondElement">
               The second element. This element must be joined to the first element
            </param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The element secondElement was not found in the firstElement document<br />
               The elements are not joined<br />
               The elements cannot be joined
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Unable to switch the join order of these elements
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.JoinGeometryUtilsExtensions.IsCuttingElementInJoin(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element)">
            <summary>
               Determines whether the first of two joined elements is cutting the second element
            </summary>
            <remarks>This functionality is not available for family documents</remarks>
            <param name="firstElement">The first element</param>
            <param name="secondElement">The second element</param>
            <returns>
               True if the secondElement is cut by the firstElement, false if the secondElement is cut by the firstElement
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The element secondElement was not found in the firstElement document<br />
               The elements are not joined
            </exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.LabelUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.LabelUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToLabel(Autodesk.Revit.DB.BuiltInParameter)">
            <summary>
                Gets the user-visible name for a BuiltInParameter
            </summary>
            <param name="source">The BuiltInParameter to get the user-visible name</param>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                Thrown when the BuiltInParameter cannot be found
            </exception>
            <remarks>The name is obtained in the current Revit language</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToLabel(Autodesk.Revit.DB.BuiltInParameter,Autodesk.Revit.ApplicationServices.LanguageType)">
            <summary>
                Gets the user-visible name for a BuiltInParameter in a specific LanguageType
            </summary>
            <param name="source">The BuiltInParameter to get the user-visible name</param>
            <param name="language">The desired LanguageType to get the user-visible name in</param>
            <returns>The BuiltInParameter name in the desired LanguageType</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                Thrown when the BuiltInParameter cannot be found
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                Thrown when the desired LanguageType cannot be found for the BuiltInParameter name
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToLabel(Autodesk.Revit.DB.BuiltInParameterGroup)">
            <summary>
                Gets the user-visible name for a BuiltInParameterGroup
            </summary>
            <param name="source">The BuiltInParameterGroup to get the user-visible name</param>
            <remarks>The name is obtained in the current Revit language</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToLabel(Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Gets the user-visible name for a BuiltInCategory
            </summary>
            <param name="source">The BuiltInCategory to get the user-visible name</param>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                Thrown when the builtin category is not valid
            </exception>
            <remarks>The name is obtained in the current Revit language</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToLabel(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Gets the user-visible name for a ForgeTypeId
            </summary>
            <param name="source">The ForgeTypeId to get the user-visible name</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                The ForgeTypeId is not valid in the context of the current API version
            </exception>
            <remarks>The name is obtained in the current Revit language</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToDisciplineLabel(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Gets the user-visible name for a discipline
            </summary>
            <param name="source">Identifier of the discipline</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Discipline must have a definition
            </exception>
            <remarks>The name is obtained in the current Revit language</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToGroupLabel(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Gets the user-visible name for a built-in parameter group
            </summary>
            <param name="source">The identifier of the parameter group to get the user-visible name</param>
            <remarks>
                The name is obtained in the current Revit language
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToSpecLabel(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Gets the user-visible name for a spec
            </summary>
            <param name="source">Identifier of the spec to get the user-visible name</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                The given identifier is neither a spec nor a category
            </exception>
            <remarks>
                The name is obtained in the current Revit language.
                If the given identifier is a category, this method returns the name of the Family Type spec with that category, e.g. "Family Type: Walls"
            </remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToSymbolLabel(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Gets the user-visible name for a symbol
            </summary>
            <param name="source">Identifier of the symbol to get the user-visible name</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Symbol must have a definition
            </exception>
            <remarks>The name is obtained in the current Revit language</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToUnitLabel(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Gets the user-visible name for a unit
            </summary>
            <param name="source">Identifier of the unit to get the user-visible name</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Cannot find DisplayUnitTypeInfo for the given unit identifier
            </exception>
            <remarks>The name is obtained in the current Revit language</remarks>
        </member>
        <member name="M:Nice3point.Revit.Extensions.LabelUtilsExtensions.ToParameterLabel(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Gets the user-visible name for a built-in parameter
            </summary>
            <param name="source">Identifier of the built-in parameter to get the user-visible name</param>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
                Thrown when the built-in parameter cannot be found
            </exception>
            <remarks>The name is obtained in the current Revit language</remarks>
        </member>
        <member name="T:Nice3point.Revit.Extensions.ParameterUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.ParameterUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterUtilsExtensions.GetParameterTypeId(Autodesk.Revit.DB.BuiltInParameter)">
            <summary> Gets the ForgeTypeId identifying the built-in parameter corresponding to the given BuiltInParameter value.</summary>
            <param name="builtInParameter">The BuiltInParameter value.</param>
            <returns>Identifier of the parameter corresponding to the given BuiltInParameter value.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterUtilsExtensions.GetBuiltInParameter(Autodesk.Revit.DB.ForgeTypeId)">
            <summary> Gets the BuiltInParameter value corresponding to built-in parameter identified by the given ForgeTypeId.</summary>
            <param name="parameterTypeId">The parameter identifier.</param>
            <returns>The BuiltInParameter value corresponding to the given parameter identifier.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               parameterTypeId is not a built-in parameter identifier. See IsBuiltInParameter(ForgeTypeId) and GetParameterTypeId(BuiltInParameter).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterUtilsExtensions.IsBuiltInGroup(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Checks whether a ForgeTypeId identifies a built-in parameter group.</summary>
            <remarks>
               A ForgeTypeId identifies a built-in parameter group if it corresponds to a valid BuiltInParameterGroup value.
            </remarks>
            <param name="groupTypeId">The identifier to check.</param>
            <returns>
               True if the ForgeTypeId identifies a built-in parameter group, false otherwise.
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterUtilsExtensions.IsBuiltInParameter(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Checks whether a ForgeTypeId identifies a built-in parameter.</summary>
            <remarks>
               A ForgeTypeId identifies a built-in parameter if it corresponds to a valid BuiltInParameter value.
            </remarks>
            <param name="parameterTypeId">The identifier to check.</param>
            <returns>True if the ForgeTypeId identifies a built-in parameter, false otherwise.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.ParameterUtilsExtensions.IsBuiltInParameter(Autodesk.Revit.DB.Parameter)">
            <summary>Checks whether a Parameter identifies a built-in parameter.</summary>
            <remarks>
               A Parameter identifies a built-in parameter if it corresponds to a valid BuiltInParameter value.
            </remarks>
            <param name="parameter">The parameter to check.</param>
            <returns>True if the Parameter identifies a built-in parameter, false otherwise.</returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.PlumbingUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.Plumbing.PlumbingUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.PlumbingUtilsExtensions.ConnectPipePlaceholdersAtElbow(Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)">
            <summary>Connects placeholders that looks like elbow connection.</summary>
            <remarks>
               The placeholders may have physical connection or may not connect at all.
               In the latter case, the first one connects to the end of second one.
               If connection fails, the placeholders cannot be physically connected.
            </remarks>
            <param name="connector1">The first end connector of placeholder to be connected to.</param>
            <param name="connector2">The second end connector of placeholder to be connected to.</param>
            <returns>True if connection succeeds, false otherwise.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The owner of connector is not pipe placeholder.
               -or-
               The owners of connectors belong to different types of system.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.PlumbingUtilsExtensions.ConnectPipePlaceholdersAtTee(Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)">
            <summary>Connects three placeholders that looks like Tee connection.</summary>
            <remarks>
               The three placeholders may or may not have physically connections. However,
               the first one should be collinear with the second and third one must have
               intersection with first and second.
               If first placeholder and second placeholder have the same size, the second one
               is merged with first one and original placeholder element will be invalid.
               If connection fails, the placeholders cannot be physically connected.
            </remarks>
            <param name="connector1">
               The first end connector of placeholder to be connected to the second.
            </param>
            <param name="connector2">
               The second end connector of placeholder to be connected to the first.
            </param>
            <param name="connector3">
               The third end connector of placeholder to be connected to the first or second.
            </param>
            <returns>True if connection succeeds, false otherwise.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The owner of connector is not pipe placeholder.
               -or-
               The owners of connectors belong to different types of system.
               -or-
               The curves of connector1 and connector2 are not collinear or either the connecto1 or connector2 is not connector of curve end.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.PlumbingUtilsExtensions.ConnectPipePlaceholdersAtCross(Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)">
            <summary>Connects placeholders that looks like Cross connection.</summary>
            <remarks>
               The placeholders may or may not have physical connection. However
               a) The ends of four connectors should intersect at same point;
               b) the first and second placeholders should be collinear each other;
               c) the third and fourth placeholders should be collinear each other and
               d) the third and fourth should have intersection with first or second placeholder.
               If connection fails, the placeholders cannot be physically connected.
            </remarks>
            <param name="connector1">
               The first end connector of placeholder to be connected to the second.
            </param>
            <param name="connector2">
               The second end connector of placeholder to be connected to the first.
            </param>
            <param name="connector3">
               The third end connector of placeholder to be connected to the forth.
            </param>
            <param name="connector4">
               The fourth end connector of placeholder to be connected to the third.
            </param>
            <returns>True if connection succeeds, false otherwise.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The owner of connector is not pipe placeholder.
               -or-
               The owners of connectors belong to different types of system.
               -or-
               The curves of connector1 and connector2 are not collinear or either the connecto1 or connector2 is not connector of curve end.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.PlumbingUtilsExtensions.PlaceCapOnOpenEnds(Autodesk.Revit.DB.Plumbing.Pipe)">
            <summary>
               Places caps on the open connectors of the pipe curve.
            </summary>
            <remarks>
               In order to place the cap, the cap type should be defined in the routing preferences that associates with the pipe type of the given element.
            </remarks>
            <param name="pipe">Pipe curve</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The pipe has no opened piping connector.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               this operation failed.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.PlumbingUtilsExtensions.PlaceCapOnOpenEnds(Autodesk.Revit.DB.Plumbing.Pipe,Autodesk.Revit.DB.ElementId)">
            <summary>
               Places caps on the open connectors of the pipe curve.
            </summary>
            <remarks>
               In order to place the cap, the cap type should be defined in the routing preferences that associates with the pipe type of the given element.
               If the typeId is a valid element id, it will be used to override the pipe type that associates with the pipe type of the given element.
            </remarks>
            <param name="pipe">Pipe curve</param>
            <param name="typeId">
               Pipe type element id.
               Default is invalidElementId.
            </param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The pipe has no opened piping connector.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               this operation failed.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.PlumbingUtilsExtensions.HasOpenConnector(Autodesk.Revit.DB.Plumbing.Pipe)">
            <summary>
               Checks if there is open piping connector for the given pipe curve.
            </summary>
            <param name="pipe">Pipe to check.</param>
            <returns>True if given pipe has open piping connector, false otherwise.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.PlumbingUtilsExtensions.BreakCurve(Autodesk.Revit.DB.Plumbing.Pipe,Autodesk.Revit.DB.XYZ)">
            <summary>Breaks the pipe curve into two parts at the given position.</summary>
            <remarks>This method is not applicable for breaking the flex pipe.</remarks>
            <param name="pipe">The pipe curve to break.</param>
            <param name="breakPoint">The break point on the pipe curve.</param>
            <returns>
               The new pipe curve element if successful otherwise null if a failure occurred.
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The given point is not on the pipe curve.
            </exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.SolidSolidCutUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.GetCuttingSolids(Autodesk.Revit.DB.Element)">
            <summary>Gets all the solids which cut the input element.</summary>
            <param name="element">The input element.</param>
            <returns>The ids of the solids which cut the input element.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.GetSolidsBeingCut(Autodesk.Revit.DB.Element)">
            <summary>Get all the solids which are cut by the input element.</summary>
            <param name="element">The input element.</param>
            <returns>The ids of the solids which are cut by the input element.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.IsAllowedForSolidCut(Autodesk.Revit.DB.Element)">
            <summary>Validates that the element is eligible for a solid-solid cut.</summary>
            <remarks>
               The element must be solid and must be a GenericForm, GeomCombination, or a FamilyInstance.
            </remarks>
            <param name="element">The solid to be cut or the cutting solid.</param>
            <returns>
               True if the input element can participate in a solid-solid cut.  False otherwise.
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.IsElementFromAppropriateContext(Autodesk.Revit.DB.Element)">
            <summary>Validates that the element is from an appropriate document.</summary>
            <remarks>
               Currently an element from either a project document, conceptual model, pattern based curtain panel, or adaptive component family
               may participate in solid-solid cuts.
            </remarks>
            <param name="element">The solid to be cut or the cutting solid.</param>
            <returns>
               True if the element is from an appropriate document for solid-solid cuts, false otherwise.
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.CanElementCutElement(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element,Autodesk.Revit.DB.CutFailureReason@)">
            <summary>Verifies if the cutting element can add a solid cut to the target element.</summary>
            <param name="cuttingElement">The cutting element.</param>
            <param name="cutElement">The element to be cut.</param>
            <param name="reason">
               The reason that the cutting element cannot add a solid cut to the cut element.
            </param>
            <returns>
               True if the cutting element can add a solid cut to the target element, false otherwise.
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.CutExistsBetweenElements(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element,System.Boolean@)">
            <summary>Checks that if there is a solid-solid cut between two elements.</summary>
            <param name="first">The solid being cut or the cutting solid.</param>
            <param name="second">The solid being cut or the cutting solid.</param>
            <param name="firstCutsSecond">
               If the return value of this function is true, this indicates which element is the cutting element from the pair.
               True if the first solid cuts the second one, false if the second solid cuts the first one.
            </param>
            <returns>
               True if there is a solid-solid cut between the input elements, false otherwise.
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.AddCutBetweenSolids(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element)">
            <summary>Adds a solid-solid cut for the two elements.</summary>
            <remarks>This utility will split faces of cutting solid by default.</remarks>
            <param name="solidToBeCut">The solid to be cut.</param>
            <param name="cuttingSolid">The cutting solid.</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The element must be in a project document or in a conceptual model, pattern based curtain panel, or adaptive component family.
               -or-
               The element does not meet the condition that it must be solid and must be a GenericForm, GeomCombination, or a FamilyInstance.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Failed to add solid-solid cut for the two elements.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.AddCutBetweenSolids(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element,System.Boolean)">
            <summary>
               Adds a solid-solid cut for the two elements with the option to control splitting of faces of the cutting solid.
            </summary>
            <param name="solidToBeCut">The solid to be cut.</param>
            <param name="cuttingSolid">The cutting solid.</param>
            <param name="splitFacesOfCuttingSolid">
               True to split faces of cutting solid where it intersects the solid to be cut, false otherwise.
            </param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The element must be in a project document or in a conceptual model, pattern based curtain panel, or adaptive component family.
               -or-
               The element does not meet the condition that it must be solid and must be a GenericForm, GeomCombination, or a FamilyInstance.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Failed to add solid-solid cut for the two elements.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.RemoveCutBetweenSolids(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element)">
            <summary>Removes the solid-solid cut between the two elements if it exists.</summary>
            <param name="first">The solid being cut or the cutting solid.</param>
            <param name="second">The solid being cut or the cutting solid.</param>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidSolidCutUtilsExtensions.SplitFacesOfCuttingSolid(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element,System.Boolean)">
            <summary>
               Causes the faces of the cutting element where it intersects the element it is cutting to be split or unsplit.
            </summary>
            <remarks>There must be a cut between the input elements.</remarks>
            <param name="first">The solid being cut or the cutting solid</param>
            <param name="second">The solid being cut or the cutting solid</param>
            <param name="split">True to split the faces of intersection, false to unsplit them.</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               There is no solid-solid cut between the input elements.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Unable to split or unsplit faces of cutting solid
            </exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.SolidUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.SolidUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidUtilsExtensions.Clone(Autodesk.Revit.DB.Solid)">
            <summary>Creates a new Solid which is a copy of the input Solid</summary>
            <param name="solid">The input solid to be copied</param>
            <returns>The newly created Solid</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidUtilsExtensions.CreateTransformed(Autodesk.Revit.DB.Solid,Autodesk.Revit.DB.Transform)">
            <summary>Creates a new Solid which is the transformation of the input Solid</summary>
            <param name="solid">The input solid to be transformed</param>
            <param name="transform">The transform (which must be conformal)</param>
            <returns>The newly created Solid</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
               Transform is not conformal.
               Or transform has a scale that is negative or zero
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidUtilsExtensions.SplitVolumes(Autodesk.Revit.DB.Solid)">
            <summary>Splits a solid geometry into several separate solids</summary>
            <remarks>
               If no splitting is done, a copy of the input solid will be returned in the output array
            </remarks>
            <param name="solid">The solid</param>
            <returns>The split solid geometries</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Failed to split the solid geometry
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidUtilsExtensions.IsValidForTessellation(Autodesk.Revit.DB.Solid)">
            <summary>Tests if the input solid or shell is valid for tessellation</summary>
            <param name="solid">The solid or shell</param>
            <returns>True if the solid or shell is valid for tessellation, false otherwise</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidUtilsExtensions.TessellateSolidOrShell(Autodesk.Revit.DB.Solid,Autodesk.Revit.DB.SolidOrShellTessellationControls)">
            <summary>
               This function facets (i.e., triangulates) a solid or an open shell. Each boundary
               component of the solid or shell is represented by a single triangulated structure
            </summary>
            <remarks>
               Every point on the triangulation of a boundary component of the solid (or
               shell) should lie within the 3D distance specified by the "accuracy" input of some
               point on the triangulation, and vice-versa. In some cases, this constraint may be
               implemented heuristically (not rigorously)
            </remarks>
            <param name="solid">The solid or shell to be faceted</param>
            <param name="tessellationControls">
               This input controls various aspects of the triangulation
            </param>
            <returns>
               The triangulated structures corresponding to the boundary components of the
               input solid or the components of the input shell
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               solidOrShell is not valid for triangulation (for example, it contains no faces)
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Unable to triangulate the solid or shell
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SolidUtilsExtensions.FindAllEdgeEndPointsAtVertex(Autodesk.Revit.DB.EdgeEndPoint)">
            <summary>Find all EdgeEndPoints at a vertex identified by the input EdgeEndPoint</summary>
            <param name="edgeEndPoint">The input EdgeEndPoint that identifies the vertex</param>
            <returns>All EdgeEndPoints at the vertex. The input EdgeEndPoint is also included</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Failed to find all EdgeEndPoints at a vertex identified by the input EdgeEndPoint
            </exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.SpecUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.SpecUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SpecUtilsExtensions.IsSpec(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Checks whether a ForgeTypeId identifies a spec.</summary>
            <param name="specTypeId">The identifier to check.</param>
            <returns>True if the ForgeTypeId identifies a spec, false otherwise.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.SpecUtilsExtensions.IsValidDataType(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
               Returns true if the given ForgeTypeId identifies a valid parameter data type.
            </summary>
            <remarks>
               A ForgeTypeId is acceptable as a parameter data type if it
               identifies either a spec or a category. When a category
               identifier is used as a parameter data type, it indicates a
               Family Type parameter of that category.
            </remarks>
            <param name="dataType">The identifier to check.</param>
            <returns>
               True if the ForgeTypeId identifies either a spec or a category, false otherwise.
            </returns>
        </member>
        <member name="T:Nice3point.Revit.Extensions.UnitFormatUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.UnitFormatUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitFormatUtilsExtensions.Format(Autodesk.Revit.DB.Units,Autodesk.Revit.DB.ForgeTypeId,System.Double,System.Boolean)">
            <summary>Formats a number with units into a string</summary>
            <param name="units">The units formatting settings.</param>
            <param name="specTypeId">Identifier of the spec of the value to format</param>
            <param name="value">The value to format, in Revit's internal units</param>
            <param name="forEditing">
                True if the formatting should be modified as necessary so that the formatted string can be successfully parsed, for example by suppressing digit grouping.
                False if unmodified settings should be used, suitable for display only
            </param>
            <returns>The formatted string</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
                Or the given value for value is not finite
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitFormatUtilsExtensions.Format(Autodesk.Revit.DB.Units,Autodesk.Revit.DB.ForgeTypeId,System.Double,System.Boolean,Autodesk.Revit.DB.FormatValueOptions)">
            <summary>Formats a number with units into a string</summary>
            <param name="units">The units formatting settings.</param>
            <param name="specTypeId">Identifier of the spec of the value to format</param>
            <param name="value">The value to format, in Revit's internal units</param>
            <param name="forEditing">
                True if the formatting should be modified as necessary so that the formatted string can be successfully parsed, for example by suppressing digit grouping.
                False if unmodified settings should be used, suitable for display only
            </param>
            <param name="options">Additional formatting options</param>
            <returns>The formatted string</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
                Or the given value for value is not finite.
                Or the unit in the FormatOptions in formatValueOptions is not a valid unit for specTypeId.
                See UnitUtils.IsValidUnit(ForgeTypeId, ForgeTypeId) and UnitUtils.GetValidUnits(ForgeTypeId)
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitFormatUtilsExtensions.TryParse(Autodesk.Revit.DB.Units,Autodesk.Revit.DB.ForgeTypeId,System.String,System.Double@,System.String@)">
            <summary>Parses a formatted string into a number with units if possible.</summary>
            <param name="units">The units formatting settings.</param>
            <param name="specTypeId">Identifier of the target spec for the value.</param>
            <param name="stringToParse">The string to parse.</param>
            <param name="value">
               The parsed value. Ignore this value if the function returns false.
            </param>
            <param name="message">
               A localized message that, if the parsing fails, explains the reason for failure.
            </param>
            <returns>True if the string can be parsed, false otherwise.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitFormatUtilsExtensions.TryParse(Autodesk.Revit.DB.Units,Autodesk.Revit.DB.ForgeTypeId,System.String,System.Double@)">
            <summary>Parses a formatted string into a number with units if possible.</summary>
            <param name="units">The units formatting settings.</param>
            <param name="specTypeId">Identifier of the target spec for the value.</param>
            <param name="stringToParse">The string to parse.</param>
            <param name="value">
               The parsed value. Ignore this value if the function returns false.
            </param>
            <returns>True if the string can be parsed, false otherwise.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitFormatUtilsExtensions.TryParse(Autodesk.Revit.DB.Units,Autodesk.Revit.DB.ForgeTypeId,System.String,Autodesk.Revit.DB.ValueParsingOptions,System.Double@,System.String@)">
            <summary>Parses a formatted string into a number with units if possible.</summary>
            <param name="units">The units formatting settings.</param>
            <param name="specTypeId">Identifier of the target spec for the value.</param>
            <param name="stringToParse">The string to parse.</param>
            <param name="valueParsingOptions">Additional parsing options.</param>
            <param name="value">
               The parsed value. Ignore this value if the function returns false.
            </param>
            <param name="message">
               A localized message that, if the parsing fails, explains the reason for failure.
            </param>
            <returns>True if the string can be parsed, false otherwise.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
               -or-
               The unit in the FormatOptions in valueParsingOptions is not a valid unit for specTypeId. See UnitUtils.IsValidUnit(ForgeTypeId, ForgeTypeId) and UnitUtils.GetValidUnits(ForgeTypeId).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitFormatUtilsExtensions.TryParse(Autodesk.Revit.DB.Units,Autodesk.Revit.DB.ForgeTypeId,System.String,Autodesk.Revit.DB.ValueParsingOptions,System.Double@)">
            <summary>Parses a formatted string into a number with units if possible.</summary>
            <param name="units">The units formatting settings.</param>
            <param name="specTypeId">Identifier of the target spec for the value.</param>
            <param name="stringToParse">The string to parse.</param>
            <param name="valueParsingOptions">Additional parsing options.</param>
            <param name="value">
               The parsed value. Ignore this value if the function returns false.
            </param>
            <returns>True if the string can be parsed, false otherwise.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
               -or-
               The unit in the FormatOptions in valueParsingOptions is not a valid unit for specTypeId. See UnitUtils.IsValidUnit(ForgeTypeId, ForgeTypeId) and UnitUtils.GetValidUnits(ForgeTypeId).
            </exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.UnitUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.UnitUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.FromUnit(System.Double,Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Converts the specified unit to internal Revit format
            </summary>
            <returns>The converted value</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.ToUnit(System.Double,Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Converts a Revit internal format value to the specified unit
            </summary>
            <returns>The converted value</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.FromMillimeters(System.Double)">
            <summary>
                Converts millimeters to internal Revit format
            </summary>
            <returns>Value in feet</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.ToMillimeters(System.Double)">
            <summary>
                Converts a Revit internal format value to millimeters
            </summary>
            <returns>Value in millimeters</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.FromMeters(System.Double)">
            <summary>
                Converts meters to internal Revit format
            </summary>
            <returns>Value in feet</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.ToMeters(System.Double)">
            <summary>
                Converts a Revit internal format value to meters
            </summary>
            <returns>Value in meters</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.FromInches(System.Double)">
            <summary>
                Converts inches to internal Revit format
            </summary>
            <returns>Value in feet</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.ToInches(System.Double)">
            <summary>
                Converts a Revit internal format value to inches
            </summary>
            <returns>Value in inches</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.FromDegrees(System.Double)">
            <summary>
                Converts degrees to internal Revit format
            </summary>
            <returns>Value in radians</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.ToDegrees(System.Double)">
            <summary>
                Converts a Revit internal format value to degrees
            </summary>
            <returns>Value in radians</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.IsValidUnit(Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Checks whether a unit is valid for a given measurable spec.</summary>
            <param name="specTypeId">Identifier of the measurable spec.</param>
            <param name="unitTypeId">Identifier of the unit to check.</param>
            <returns>True if the unit is valid, false otherwise.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.IsSymbol(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Checks whether a ForgeTypeId identifies a symbol.</summary>
            <remarks>The SymbolTypeId class offers symbol identifiers.</remarks>
            <param name="symbolTypeId">The identifier to check.</param>
            <returns>True if the ForgeTypeId identifies a symbol, false otherwise.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.IsUnit(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Checks whether a ForgeTypeId identifies a unit.</summary>
            <remarks>The UnitTypeId class offers unit identifiers.</remarks>
            <param name="unitTypeId">The identifier to check.</param>
            <returns>True if the ForgeTypeId identifies a unit, false otherwise.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.GetValidUnits(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Gets the identifiers of all valid units for a given measurable spec.</summary>
            <param name="specTypeId">Identifier of the measurable spec.</param>
            <returns>Identifiers of the valid units.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.GetTypeCatalogStringForSpec(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Gets the string used in type catalogs to identify a given measurable spec.</summary>
            <param name="specTypeId">Identifier of the measurable spec.</param>
            <returns>
               The type catalog string, or an empty string if the measurable spec cannot be used in type catalogs.
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.GetTypeCatalogStringForUnit(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Gets the string used in type catalogs to identify a given unit.</summary>
            <param name="unitTypeId">Identifier of the unit.</param>
            <returns>
               The type catalog string, or an empty string if the unit cannot be used in type catalogs.
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               unitTypeId is not a unit identifier. See UnitUtils.IsUnit(ForgeTypeId) and UnitUtils.GetUnitTypeId(DisplayUnitType).
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.IsMeasurableSpec(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
               Checks whether a ForgeTypeId identifies a spec associated with units of measurement.
            </summary>
            <param name="specTypeId">The identifier to check.</param>
            <returns>True if the ForgeTypeId identifies a measurable spec, false otherwise.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.UnitUtilsExtensions.GetDiscipline(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>Gets the discipline for a given measurable spec.</summary>
            <param name="specTypeId">Identifier of the measurable spec.</param>
            <returns>Identifier of the discipline.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               specTypeId is not a measurable spec identifier. See UnitUtils.IsMeasurableSpec(ForgeTypeId).
            </exception>
        </member>
        <member name="T:Nice3point.Revit.Extensions.WorksharingUtilsExtensions">
            <summary>
                Represent extension methods for the <see cref="T:Autodesk.Revit.DB.WorksharingUtils"/> class.
            </summary>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.GetCheckoutStatus(Autodesk.Revit.DB.Element)">
            <summary>Gets the ownership status of an element.</summary>
            <remarks>
                 <p> This method returns a locally cached value which may not be up to date with the current state
            of the element in the central.  Because of this, the return value is suitable for reporting to an
            interactive user (e.g. via a mechanism similar to Worksharing display mode), but cannot be considered
            a reliable indication of whether the element can be immediately edited by the application.  Also, the return value
            may not be dependable in the middle of a local transaction.  See the remarks
            on <see cref="T:Autodesk.Revit.DB.WorksharingUtils" /> for more details. </p>
                 <p> For performance reasons, the model is not validated to be workshared,
            and the element id is also not validated; the element will not be expanded. </p>
               </remarks>
            <param name="element">The element itself.</param>
            <returns>
               A summary of whether the element is unowned, owned by the current user, or owned by another user.
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.GetCheckoutStatus(Autodesk.Revit.DB.Element,System.String@)">
            <summary>Gets the ownership status and outputs the owner of an element.</summary>
            <remarks>
                 <p> This method returns a locally cached value which may not be up to date with the current state
            of the element in the central.  Because of this, the return value is suitable for reporting to an
            interactive user (e.g. via a mechanism similar to Worksharing display mode), but cannot be considered
            a reliable indication of whether the element can be immediately edited by the application.  Also, the return value
            may not be dependable in the middle of a local transaction.  See the remarks
            on <see cref="T:Autodesk.Revit.DB.WorksharingUtils" /> for more details. </p>
                 <p> For performance reasons, the model is not validated to be workshared,
            and the element id is also not validated; the element will not be expanded. </p>
               </remarks>
            <param name="element">The element itself.</param>
            <param name="owner">The owner of the element, or an empty string if no one owns it.</param>
            <returns>
               An indication of whether the element is unowned, owned by the current user, or owned by another user.
            </returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.GetWorksharingTooltipInfo(Autodesk.Revit.DB.Element)">
            <summary>
               Gets worksharing information about an element to display in an in-canvas tooltip.
            </summary>
            <remarks>
                 <p> If there is no element corresponding to the given id,
            then all the strings returned in WorksharingTooltipInfo are empty. </p>
                 <p> The return value may not be dependable in the middle of a transaction.
            See the remarks on <see cref="T:Autodesk.Revit.DB.WorksharingUtils" /> for more details. </p>
               </remarks>
            <param name="element">The element itself.</param>
            <returns>Worksharing information about the specified element.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.GetModelUpdatesStatus(Autodesk.Revit.DB.Element)">
            <summary>Gets the status of a single element in the central model.</summary>
            <remarks>
                 <p> This method returns a locally cached value which may not be up to date with the current state
            of the element in the central.  Because of this, the return value is suitable for reporting to an
            interactive user (e.g. via a mechanism similar to Worksharing display mode), but cannot be considered
            a reliable indication of whether the element can be immediately edited by the application.  Also, the return value
            may not be dependable in the middle of a local transaction.  See the remarks
            on <see cref="T:Autodesk.Revit.DB.WorksharingUtils" /> for more details. </p>
                 <p> For performance reasons, the model is not validated to be workshared,
            and the element id is also not validated; the element will not be expanded.</p>
               </remarks>
            <param name="element">The element itself.</param>
            <returns>The status of the element in the local session versus the central model.</returns>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.CheckoutWorksets(System.Collections.Generic.ICollection{Autodesk.Revit.DB.WorksetId},Autodesk.Revit.DB.Document)">
            <summary>
               Obtains ownership for the current user of as many specified worksets as possible.
            </summary>
            <remarks>
                 <p> For best performance, check out all worksets in one big call, rather than many small calls. </p>
                 <p> When there comes a contention error when locking the central model, this API would wait and retry
            endlessly until getting the lock of the central model. </p>
               </remarks>
            <param name="document">The document containing the worksets.</param>
            <param name="worksetsToCheckout">The ids of the worksets to attempt to check out.</param>
            <returns>
               The ids of all specified worksets that are now owned,
               including all that were owned prior to the function call.
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               document is not a workshared document.
               -or-
               document is not a primary document, it is a linked document.
               -or-
               document is read-only: It cannot be modified.
               -or-
               document has an open editing transaction and is accepting changes.
               -or-
               There are one or more ids with no corresponding workset.
               -or-
               Saving is not allowed in the current application mode.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralFileCommunicationException">
               The file-based central model could not be reached,
               e.g. the network is down or the file server is down.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelAccessDeniedException">
               Access to the central model was denied due to lack of access privileges.
               -or-
               Access to the central model was denied. A possible reason is because the model was under maintenance.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelContentionException">
               The central model are locked by another client.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelException">
               The central model is overwritten by other user.
               -or-
               The central model is missing.
               -or-
               An internal error happened on the central model, please contact the server administrator.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelVersionArchivedException">
               Last central version merged into the local model has been archived in the central model.
               This exception could only be thrown from cloud models.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Operation is not permitted when there is any open sub-transaction, transaction, or transaction group.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerCommunicationException">
               The server-based central model could not be accessed
               because of a network communication error.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerInternalException">
               An internal error happened on the server, please contact the server administrator.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.CheckoutWorksets(System.Collections.Generic.ISet{Autodesk.Revit.DB.WorksetId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.TransactWithCentralOptions)">
            <summary>
               Obtains ownership for the current user of as many specified worksets as possible.
            </summary>
            <remarks>
               For best performance, check out all worksets in one big call, rather than many small calls.
            </remarks>
            <param name="document">The document containing the worksets.</param>
            <param name="worksetsToCheckout">The ids of the worksets to attempt to check out.</param>
            <param name="options">
               Options to customize access to the central model.
               <see langword="null" /> is allowed and means no customization.
            </param>
            <returns>
               The ids of all specified worksets that are now owned,
               including all that were owned prior to the function call.
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               document is not a workshared document.
               -or-
               document is not a primary document, it is a linked document.
               -or-
               document is read-only: It cannot be modified.
               -or-
               document has an open editing transaction and is accepting changes.
               -or-
               There are one or more ids with no corresponding workset.
               -or-
               Saving is not allowed in the current application mode.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralFileCommunicationException">
               The file-based central model could not be reached,
               e.g. the network is down or the file server is down.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelAccessDeniedException">
               Access to the central model was denied due to lack of access privileges.
               -or-
               Access to the central model was denied. A possible reason is because the model was under maintenance.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelContentionException">
               The central model are locked by another client.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelException">
               The central model is overwritten by other user.
               -or-
               The central model is missing.
               -or-
               An internal error happened on the central model, please contact the server administrator.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelVersionArchivedException">
               Last central version merged into the local model has been archived in the central model.
               This exception could only be thrown from cloud models.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Operation is not permitted when there is any open sub-transaction, transaction, or transaction group.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerCommunicationException">
               The server-based central model could not be accessed
               because of a network communication error.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerInternalException">
               An internal error happened on the server, please contact the server administrator.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.CheckoutElements(System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            <summary>
               Obtains ownership for the current user of as many specified elements as possible.
            </summary>
            <remarks>
                 <p> For best performance, checkout all elements in one big call, rather than many small calls. </p>
                 <p> Revit may check out additional elements that are needed to check out the elements you requested.
            For example, if you request an element that is in a group, Revit will check out the entire group. </p>
                 <p> When there comes a contention error when locking the central model, this API would wait and retry
            endlessly until getting the lock of the central model. </p>
               </remarks>
            <param name="document">The document containing the elements.</param>
            <param name="elementsToCheckout">The ids of the elements to attempt to check out.</param>
            <returns>
               The ids of all specified elements that are now owned (but possibly out of date),
               including all that were owned prior to the function call.
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               document is not a workshared document.
               -or-
               document is not a primary document, it is a linked document.
               -or-
               One or more elements in elementsToCheckout do not exist in the document.
               -or-
               Saving is not allowed in the current application mode.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralFileCommunicationException">
               Editing permissions for the file-based central model could not be accessed for write,
               e.g. the network is down, central is missing, or central is read-only.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelAccessDeniedException">
               Access to the central model was denied. A possible reason is because the model was under maintenance.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelContentionException">
               Editing permissions for the central model are locked and the last attempt to lock was canceled.
               -or-
               The central model is being accessed by another client.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelException">
               An error has occurred while checking out worksets or elements.
               -or-
               The central model is overwritten by other user.
               -or-
               The central model is missing.
               -or-
               An internal error happened on the central model, please contact the server administrator.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelVersionArchivedException">
               Last central version merged into the local model has been archived in the central model.
               This exception could only be thrown from cloud models.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerCommunicationException">
               The server-based central model could not be accessed
               because of a network communication error.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerInternalException">
               An internal error happened on the server, please contact the server administrator.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.CheckoutElements(System.Collections.Generic.ISet{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.TransactWithCentralOptions)">
            <summary>
               Obtains ownership for the current user of as many specified elements as possible.
            </summary>
            <remarks>
                 <p> For best performance, checkout all elements in one big call, rather than many small calls. </p>
                 <p> Revit may check out additional elements that are needed to check out the elements you requested.
            For example, if you request an element that is in a group, Revit will check out the entire group. </p>
               </remarks>
            <param name="document">The document containing the elements.</param>
            <param name="elementsToCheckout">The ids of the elements to attempt to check out.</param>
            <param name="options">
               Options to customize access to the central model.
               <see langword="null" /> is allowed and means no customization.
            </param>
            <returns>
               The ids of all specified elements that are now owned (but possibly out of date),
               including all that were owned prior to the function call.
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               document is not a workshared document.
               -or-
               document is not a primary document, it is a linked document.
               -or-
               One or more elements in elementsToCheckout do not exist in the document.
               -or-
               Saving is not allowed in the current application mode.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralFileCommunicationException">
               Editing permissions for the file-based central model could not be accessed for write,
               e.g. the network is down, central is missing, or central is read-only.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelAccessDeniedException">
               Access to the central model was denied. A possible reason is because the model was under maintenance.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelContentionException">
               Editing permissions for the central model are locked and the last attempt to lock was canceled.
               -or-
               The central model is being accessed by another client.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelException">
               An error has occurred while checking out worksets or elements.
               -or-
               The central model is overwritten by other user.
               -or-
               The central model is missing.
               -or-
               An internal error happened on the central model, please contact the server administrator.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelVersionArchivedException">
               Last central version merged into the local model has been archived in the central model.
               This exception could only be thrown from cloud models.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerCommunicationException">
               The server-based central model could not be accessed
               because of a network communication error.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerInternalException">
               An internal error happened on the server, please contact the server administrator.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.RelinquishOwnership(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.RelinquishOptions,Autodesk.Revit.DB.TransactWithCentralOptions)">
            <summary>
               Relinquishes ownership by the current user of as many specified elements and worksets as possible,
               and grants element ownership requested by other users on a first-come, first-served basis.
            </summary>
            <remarks>
                 <p> Elements and worksets owned by other users are ignored. </p>
                 <p> Only unmodified elements already in central will be relinquished by this method.
            Newly added and modified elements cannot be relinquished
            until they have been synchronized with central. </p>
                 <p> For best performance, relinquish items in one big call, rather than many small calls. </p>
               </remarks>
            <param name="document">The document containing the elements and worksets.</param>
            <param name="generalCategories">
               General categories of items to relinquish.  See RelinquishOptions for details.
            </param>
            <param name="options">
               Options to customize access to the central model.
               <see langword="null" /> is allowed and means no customization.
            </param>
            <returns>The elements and worksets that were relinquished.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               document is not a workshared document.
               -or-
               document is not a primary document, it is a linked document.
               -or-
               document is read-only: It cannot be modified.
               -or-
               document has an open editing transaction and is accepting changes.
               -or-
               Saving is not allowed in the current application mode.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralFileCommunicationException">
               The file-based central model could not be reached,
               e.g. the network is down or the file server is down.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelAccessDeniedException">
               Access to the central model was denied due to lack of access privileges.
               -or-
               Access to the central model was denied. A possible reason is because the model was under maintenance.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelContentionException">
               The central model is locked by another client.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelException">
               The central model is overwritten by other user.
               -or-
               The central model is missing.
               -or-
               An internal error happened on the central model, please contact the server administrator.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               Operation is not permitted when there is any open sub-transaction, transaction, or transaction group.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerCommunicationException">
               The server-based central model could not be accessed
               because of a network communication error.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerInternalException">
               An internal error happened on the server, please contact the server administrator.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.CreateNewLocal(Autodesk.Revit.DB.ModelPath,Autodesk.Revit.DB.ModelPath)">
            <summary>
               Takes a path to a central model and copies the model into a new local file for the current user.
            </summary>
            <param name="source">The path to the central model.</param>
            <param name="target">The path to put the new local file.</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
               The given path sourcePath is a cloud path which is not supported in this method.
               -or-
               The model is not workshared.
               -or-
               The central model has not fully enabled worksharing.
               It must be opened and resaved to finish enabling worksharing.
               -or-
               The model is a local file.
               -or-
               The central model is not saved in the current Revit version.
               -or-
               The model is transmitted.
               -or-
               The specified filepath is invalid.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelAccessDeniedException">
               Access to the central model was denied due to lack of access privileges.
               -or-
               Access to the central model was denied. A possible reason is because the model was under maintenance.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelContentionException">
               The central model is locked by another user.
               -or-
               The central model is being accessed by another client.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelException">
               The central model is missing.
               -or-
               An internal error happened on the central model, please contact the server administrator.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.FileArgumentAlreadyExistsException">
               The file or folder already exists and cannot be overwritten.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               This functionality is not available in Revit LT.
               -or-
               File already exists!
               -or-
               Revit Server does not support local models.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerCommunicationException">
               The server-based central model could not be accessed
               because of a network communication error.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerInternalException">
               An internal error happened on the server, please contact the server administrator.
            </exception>
        </member>
        <member name="M:Nice3point.Revit.Extensions.WorksharingUtilsExtensions.GetUserWorksetInfo(Autodesk.Revit.DB.ModelPath)">
            <summary>
               Gets information about user worksets in a workshared model file, without fully opening the file.
            </summary>
            <remarks>
               This method provides a preview of the user worksets available in a file, allowing an
               application to look up the necessary workset ids and information to properly fill out a WorksetConfiguration
               structure before opening or linking to this model.
            </remarks>
            <param name="path">The path to the workshared model.</param>
            <returns>
               Information about all the user worksets in the model.
               The list is sorted by workset id.
            </returns>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelAccessDeniedException">
               Access to the central model was denied due to lack of access privileges.
               -or-
               Access to the central model was denied. A possible reason is because the model was under maintenance.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelContentionException">
               The central model are locked by another client.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.CentralModelException">
               The central model is missing.
               -or-
               The central model is corrupt or not an RVT file.
               -or-
               The model is not workshared.
               -or-
               The central model is overwritten by other user.
               -or-
               An internal error happened on the central model, please contact the server administrator.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.FileAccessException">
               The model could not be accessed due to lack of access privileges.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.FileArgumentNotFoundException">
               The Revit model specified by path doesn't exist.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.FileNotFoundException">
               The model could not be found at the specified path.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
               This functionality is not available in Revit LT.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerCommunicationException">
               The server-based central model could not be accessed
               because of a network communication error.
            </exception>
            <exception cref="T:Autodesk.Revit.Exceptions.RevitServerInternalException">
               An internal error happened on the server, please contact the server administrator.
            </exception>
        </member>
        <member name="T:Autodesk.Revit.UI.IRibbonStackPanel">
            <summary>
                Represents an interface for adding UI elements to a vertical stack panel on the Revit Ribbon.
            </summary>
            <remarks>By default, StackPanel accommodates 3 elements vertically. If the added items exceed the maximum threshold, they will be automatically added to a new column.</remarks>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddPushButton``1(System.String)">
            <summary>
                Adds a PushButton to the vertical stack panel.
            </summary>
            <typeparam name="TCommand">The type of the command that implements <see cref="T:Autodesk.Revit.UI.IExternalCommand"/>.</typeparam>
            <param name="buttonText">The label text for the PushButton.</param>
            <returns>The added PushButton.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a PushButton with the same Command already exists in the panel.
            </exception>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddPullDownButton(System.String)">
            <summary>
                Adds a PullDownButton to the vertical stack panel.
            </summary>
            <param name="buttonText">The label text for the PullDownButton.</param>
            <returns>The added PullDownButton.</returns>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddPullDownButton(System.String,System.String)">
            <summary>
                Adds a PullDownButton to the vertical stack panel with a unique internal name.
            </summary>
            <param name="buttonText">The label text for the PullDownButton.</param>
            <param name="internalName">A unique internal name for the PullDownButton.</param>
            <returns>The added PullDownButton.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a PullDownButton with the same internalName already exists in the panel.
            </exception>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddSplitButton(System.String)">
            <summary>
                Adds a SplitButton to the vertical stack panel.
            </summary>
            <param name="buttonText">The label text for the SplitButton.</param>
            <returns>The added SplitButton.</returns>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddSplitButton(System.String,System.String)">
            <summary>
                Adds a SplitButton to the vertical stack panel with a unique internal name.
            </summary>
            <param name="buttonText">The label text for the SplitButton.</param>
            <param name="internalName">A unique internal name for the SplitButton.</param>
            <returns>The added SplitButton.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a SplitButton with the same internalName already exists in the panel.
            </exception>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddComboBox">
            <summary>
                Adds a ComboBox to the vertical stack panel.
            </summary>
            <returns>The added ComboBox.</returns>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddComboBox(System.String)">
            <summary>
                Adds a ComboBox to the vertical stack panel with a unique internal name.
            </summary>
            <param name="internalName">A unique internal name for the ComboBox.</param>
            <returns>The added ComboBox.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a ComboBox with the same internalName already exists in the panel.
            </exception>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddTextBox">
            <summary>
                Adds a TextBox to the vertical stack panel.
            </summary>
            <returns>The added TextBox.</returns>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddTextBox(System.String)">
            <summary>
                Adds a TextBox to the vertical stack panel with a unique internal name.
            </summary>
            <param name="internalName">A unique internal name for the TextBox.</param>
            <returns>The added TextBox.</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
                Thrown if a TextBox with the same internalName already exists in the panel.
            </exception>
        </member>
        <member name="M:Autodesk.Revit.UI.IRibbonStackPanel.AddLabel(System.String)">
            <summary>
                Adds a label to the vertical stack panel.
            </summary>
            <param name="labelText">The text content for the label.</param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="!:ReadOnlySpan&lt;T&gt;"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
